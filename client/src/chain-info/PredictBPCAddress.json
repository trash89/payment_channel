{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address payable[2]",
          "name": "_users",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_balances",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address payable[2]",
          "name": "_users",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_balances",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        }
      ],
      "name": "getDeployEncodedCallData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address payable[2]",
          "name": "_users",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_balances",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        }
      ],
      "name": "predict",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "allSourcePaths": {
    "1": "/home/marius/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/utils/Strings.sol",
    "10": "contracts/console.sol",
    "2": "/home/marius/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/utils/cryptography/ECDSA.sol",
    "3": "/home/marius/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/utils/math/SafeMath.sol",
    "4": "contracts/BidirectionalPayment.sol",
    "6": "contracts/PredictBPCAddress.sol"
  },
  "ast": {
    "absolutePath": "contracts/PredictBPCAddress.sol",
    "exportedSymbols": {
      "BiDirectionalPaymentChannel": [
        580
      ],
      "ECDSA": [
        10600
      ],
      "PredictBPCAddress": [
        1507
      ],
      "SafeMath": [
        10912
      ],
      "Strings": [
        11155
      ],
      "console": [
        10193
      ]
    },
    "id": 1508,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1283,
        "literals": [
          "solidity",
          "0.8",
          ".14"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:6"
      },
      {
        "absolutePath": "contracts/console.sol",
        "file": "./console.sol",
        "id": 1284,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1508,
        "sourceUnit": 10194,
        "src": "57:23:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/BidirectionalPayment.sol",
        "file": "./BidirectionalPayment.sol",
        "id": 1285,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1508,
        "sourceUnit": 581,
        "src": "81:36:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "PredictBPCAddress",
        "contractDependencies": [
          580
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 1507,
        "linearizedBaseContracts": [
          1507
        ],
        "name": "PredictBPCAddress",
        "nameLocation": "128:17:6",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1294,
              "nodeType": "Block",
              "src": "166:70:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "50726564696374425043416464726573732e636f6e7374727563746f7228292063616c6c6564",
                        "id": 1291,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "188:40:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a153db8285f971e34337a65bf02dc5c3824272409b8907718960ac163c606bcf",
                          "typeString": "literal_string \"PredictBPCAddress.constructor() called\""
                        },
                        "value": "PredictBPCAddress.constructor() called"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_a153db8285f971e34337a65bf02dc5c3824272409b8907718960ac163c606bcf",
                          "typeString": "literal_string \"PredictBPCAddress.constructor() called\""
                        }
                      ],
                      "expression": {
                        "id": 1288,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "176:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1290,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2724,
                      "src": "176:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) view"
                      }
                    },
                    "id": 1292,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "176:53:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1293,
                  "nodeType": "ExpressionStatement",
                  "src": "176:53:6"
                }
              ]
            },
            "id": 1295,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1286,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "163:2:6"
            },
            "returnParameters": {
              "id": 1287,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "166:0:6"
            },
            "scope": 1507,
            "src": "152:84:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1308,
              "nodeType": "Block",
              "src": "269:150:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "50726564696374425043416464726573732e7265636569766528292c20726563656976696e672025642066726f6d202573",
                        "id": 1301,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "304:51:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8ff5262dc5dded36015c380f94920b736c7bf9efde1e6845bfa89c1896c28224",
                          "typeString": "literal_string \"PredictBPCAddress.receive(), receiving %d from %s\""
                        },
                        "value": "PredictBPCAddress.receive(), receiving %d from %s"
                      },
                      {
                        "expression": {
                          "id": 1302,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "369:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "src": "369:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1304,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "392:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1305,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "392:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_8ff5262dc5dded36015c380f94920b736c7bf9efde1e6845bfa89c1896c28224",
                          "typeString": "literal_string \"PredictBPCAddress.receive(), receiving %d from %s\""
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1298,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "279:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1300,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3424,
                      "src": "279:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (string memory,uint256,address) view"
                      }
                    },
                    "id": 1306,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "279:133:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1307,
                  "nodeType": "ExpressionStatement",
                  "src": "279:133:6"
                }
              ]
            },
            "id": 1309,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1296,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "249:2:6"
            },
            "returnParameters": {
              "id": 1297,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "269:0:6"
            },
            "scope": 1507,
            "src": "242:177:6",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1318,
              "nodeType": "Block",
              "src": "794:880:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "50726564696374425043416464726573732e66616c6c6261636b28292063616c6c6564",
                        "id": 1315,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "816:37:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_246bee9130555d428b1142d831f0d966723d27aba9148ba9bc0bd971a70c68f3",
                          "typeString": "literal_string \"PredictBPCAddress.fallback() called\""
                        },
                        "value": "PredictBPCAddress.fallback() called"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_246bee9130555d428b1142d831f0d966723d27aba9148ba9bc0bd971a70c68f3",
                          "typeString": "literal_string \"PredictBPCAddress.fallback() called\""
                        }
                      ],
                      "expression": {
                        "id": 1312,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "804:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1314,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2724,
                      "src": "804:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) view"
                      }
                    },
                    "id": 1316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "804:50:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1317,
                  "nodeType": "ExpressionStatement",
                  "src": "804:50:6"
                }
              ]
            },
            "id": 1319,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1310,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "774:2:6"
            },
            "returnParameters": {
              "id": 1311,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "794:0:6"
            },
            "scope": 1507,
            "src": "766:908:6",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1357,
              "nodeType": "Block",
              "src": "1943:384:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "50726564696374425043416464726573732e676574456e636f64656443616c6c4461746128292063616c6c6564",
                        "id": 1343,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1965:47:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fea32a0d88f721bc558e25e9657203f5ff91394f110136c8636e343ed3cb2e41",
                          "typeString": "literal_string \"PredictBPCAddress.getEncodedCallData() called\""
                        },
                        "value": "PredictBPCAddress.getEncodedCallData() called"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_fea32a0d88f721bc558e25e9657203f5ff91394f110136c8636e343ed3cb2e41",
                          "typeString": "literal_string \"PredictBPCAddress.getEncodedCallData() called\""
                        }
                      ],
                      "expression": {
                        "id": 1340,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "1953:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1342,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2724,
                      "src": "1953:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) view"
                      }
                    },
                    "id": 1344,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1953:60:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1345,
                  "nodeType": "ExpressionStatement",
                  "src": "1953:60:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "6465706c6f7928627974657333322c75696e743235362c616464726573735b325d2c75696e743235365b325d2c75696e743235362c75696e7432353629",
                        "id": 1348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2083:63:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d0c7bbf3ace6e547b0d5e60c1dcf4fb7b17d7994256ef6d984c67c6549d8e556",
                          "typeString": "literal_string \"deploy(bytes32,uint256,address[2],uint256[2],uint256,uint256)\""
                        },
                        "value": "deploy(bytes32,uint256,address[2],uint256[2],uint256,uint256)"
                      },
                      {
                        "id": 1349,
                        "name": "_salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1321,
                        "src": "2164:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 1350,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1323,
                        "src": "2187:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1351,
                        "name": "_users",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1327,
                        "src": "2211:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                          "typeString": "address payable[2] memory"
                        }
                      },
                      {
                        "id": 1352,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1331,
                        "src": "2235:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        }
                      },
                      {
                        "id": 1353,
                        "name": "_expiresAt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1333,
                        "src": "2262:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1354,
                        "name": "_challengePeriod",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1335,
                        "src": "2290:16:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_d0c7bbf3ace6e547b0d5e60c1dcf4fb7b17d7994256ef6d984c67c6549d8e556",
                          "typeString": "literal_string \"deploy(bytes32,uint256,address[2],uint256[2],uint256,uint256)\""
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                          "typeString": "address payable[2] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1346,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "2042:3:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 1347,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSignature",
                      "nodeType": "MemberAccess",
                      "src": "2042:23:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (string memory) pure returns (bytes memory)"
                      }
                    },
                    "id": 1355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2042:278:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "functionReturnParameters": 1339,
                  "id": 1356,
                  "nodeType": "Return",
                  "src": "2023:297:6"
                }
              ]
            },
            "functionSelector": "d41c72d2",
            "id": 1358,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDeployEncodedCallData",
            "nameLocation": "1689:24:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1336,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1321,
                  "mutability": "mutable",
                  "name": "_salt",
                  "nameLocation": "1731:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1358,
                  "src": "1723:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1320,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1723:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1323,
                  "mutability": "mutable",
                  "name": "_value",
                  "nameLocation": "1754:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1358,
                  "src": "1746:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1322,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1746:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1327,
                  "mutability": "mutable",
                  "name": "_users",
                  "nameLocation": "1796:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1358,
                  "src": "1770:32:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                    "typeString": "address payable[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1324,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1770:15:6",
                      "stateMutability": "payable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "id": 1326,
                    "length": {
                      "hexValue": "32",
                      "id": 1325,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1786:1:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1770:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_payable_$2_storage_ptr",
                      "typeString": "address payable[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1331,
                  "mutability": "mutable",
                  "name": "_balances",
                  "nameLocation": "1830:9:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1358,
                  "src": "1812:27:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1328,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1812:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1330,
                    "length": {
                      "hexValue": "32",
                      "id": 1329,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1820:1:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1812:10:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1333,
                  "mutability": "mutable",
                  "name": "_expiresAt",
                  "nameLocation": "1857:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1358,
                  "src": "1849:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1332,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1849:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1335,
                  "mutability": "mutable",
                  "name": "_challengePeriod",
                  "nameLocation": "1885:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1358,
                  "src": "1877:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1334,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1877:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1713:194:6"
            },
            "returnParameters": {
              "id": 1339,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1338,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1358,
                  "src": "1929:12:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1337,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1929:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1928:14:6"
            },
            "scope": 1507,
            "src": "1680:647:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1430,
              "nodeType": "Block",
              "src": "2576:730:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "50726564696374425043416464726573732e6465706c6f7928292063616c6c6564",
                        "id": 1382,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2598:35:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c0edaf333f17bdc7d02ed8a2e04cd7d6bf1c95abe291395d6a60ccfd6c8eacfd",
                          "typeString": "literal_string \"PredictBPCAddress.deploy() called\""
                        },
                        "value": "PredictBPCAddress.deploy() called"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c0edaf333f17bdc7d02ed8a2e04cd7d6bf1c95abe291395d6a60ccfd6c8eacfd",
                          "typeString": "literal_string \"PredictBPCAddress.deploy() called\""
                        }
                      ],
                      "expression": {
                        "id": 1379,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "2586:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1381,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2724,
                      "src": "2586:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) view"
                      }
                    },
                    "id": 1383,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2586:48:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1384,
                  "nodeType": "ExpressionStatement",
                  "src": "2586:48:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "636f6e74726163742062616c616e6365206973202564",
                        "id": 1388,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2656:24:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d223f9629413f93f9f7e4b7f8f03a357b4e91d354505d3f1ec3dd8188eb917aa",
                          "typeString": "literal_string \"contract balance is %d\""
                        },
                        "value": "contract balance is %d"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1391,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "2690:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_PredictBPCAddress_$1507",
                                "typeString": "contract PredictBPCAddress"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_PredictBPCAddress_$1507",
                                "typeString": "contract PredictBPCAddress"
                              }
                            ],
                            "id": 1390,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2682:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1389,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2682:7:6",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2682:13:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1393,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "balance",
                        "nodeType": "MemberAccess",
                        "src": "2682:21:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_d223f9629413f93f9f7e4b7f8f03a357b4e91d354505d3f1ec3dd8188eb917aa",
                          "typeString": "literal_string \"contract balance is %d\""
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1385,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "2644:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1387,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2837,
                      "src": "2644:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (string memory,uint256) view"
                      }
                    },
                    "id": 1394,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2644:60:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1395,
                  "nodeType": "ExpressionStatement",
                  "src": "2644:60:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "53616c74206973",
                        "id": 1399,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2936:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ca07ae8061799b91e8b3f4e1decdb0a3a2fd06072c9853e590d6e48d6fc0ab78",
                          "typeString": "literal_string \"Salt is\""
                        },
                        "value": "Salt is"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_ca07ae8061799b91e8b3f4e1decdb0a3a2fd06072c9853e590d6e48d6fc0ab78",
                          "typeString": "literal_string \"Salt is\""
                        }
                      ],
                      "expression": {
                        "id": 1396,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "2924:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1398,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2724,
                      "src": "2924:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) view"
                      }
                    },
                    "id": 1400,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2924:22:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1401,
                  "nodeType": "ExpressionStatement",
                  "src": "2924:22:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1405,
                        "name": "_salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1360,
                        "src": "2975:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 1402,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "2956:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1404,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "logBytes32",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2696,
                      "src": "2956:18:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32) view"
                      }
                    },
                    "id": 1406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2956:25:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1407,
                  "nodeType": "ExpressionStatement",
                  "src": "2956:25:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "56616c7565206973202564",
                        "id": 1411,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3003:13:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2c146af9941c417a51a28078fbffc98bd781f736dfd069343225b070cefbc71e",
                          "typeString": "literal_string \"Value is %d\""
                        },
                        "value": "Value is %d"
                      },
                      {
                        "id": 1412,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1362,
                        "src": "3018:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_2c146af9941c417a51a28078fbffc98bd781f736dfd069343225b070cefbc71e",
                          "typeString": "literal_string \"Value is %d\""
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1408,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "2991:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1410,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2837,
                      "src": "2991:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (string memory,uint256) view"
                      }
                    },
                    "id": 1413,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2991:34:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1414,
                  "nodeType": "ExpressionStatement",
                  "src": "2991:34:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1423,
                            "name": "_users",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1366,
                            "src": "3160:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                              "typeString": "address payable[2] memory"
                            }
                          },
                          {
                            "id": 1424,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1370,
                            "src": "3188:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          },
                          {
                            "id": 1425,
                            "name": "_expiresAt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1372,
                            "src": "3219:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1426,
                            "name": "_challengePeriod",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1374,
                            "src": "3251:16:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                              "typeString": "address payable[2] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                                "typeString": "address payable[2] memory"
                              },
                              {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1419,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "3079:31:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_creation_payable$_t_array$_t_address_payable_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_contract$_BiDirectionalPaymentChannel_$580_$",
                              "typeString": "function (address payable[2] memory,uint256[2] memory,uint256,uint256) payable returns (contract BiDirectionalPaymentChannel)"
                            },
                            "typeName": {
                              "id": 1418,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1417,
                                "name": "BiDirectionalPaymentChannel",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 580,
                                "src": "3083:27:6"
                              },
                              "referencedDeclaration": 580,
                              "src": "3083:27:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_BiDirectionalPaymentChannel_$580",
                                "typeString": "contract BiDirectionalPaymentChannel"
                              }
                            }
                          },
                          "id": 1422,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "salt",
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 1420,
                              "name": "_salt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1360,
                              "src": "3117:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 1421,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1362,
                              "src": "3131:6:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "3079:59:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_creation_payable$_t_array$_t_address_payable_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_contract$_BiDirectionalPaymentChannel_$580_$valuesalt",
                            "typeString": "function (address payable[2] memory,uint256[2] memory,uint256,uint256) payable returns (contract BiDirectionalPaymentChannel)"
                          }
                        },
                        "id": 1427,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3079:206:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BiDirectionalPaymentChannel_$580",
                          "typeString": "contract BiDirectionalPaymentChannel"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_BiDirectionalPaymentChannel_$580",
                          "typeString": "contract BiDirectionalPaymentChannel"
                        }
                      ],
                      "id": 1416,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3054:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 1415,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3054:7:6",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 1428,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3054:245:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1378,
                  "id": 1429,
                  "nodeType": "Return",
                  "src": "3035:264:6"
                }
              ]
            },
            "functionSelector": "d0c7bbf3",
            "id": 1431,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deploy",
            "nameLocation": "2342:6:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1375,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1360,
                  "mutability": "mutable",
                  "name": "_salt",
                  "nameLocation": "2366:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1431,
                  "src": "2358:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1359,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2358:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1362,
                  "mutability": "mutable",
                  "name": "_value",
                  "nameLocation": "2389:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1431,
                  "src": "2381:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1361,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2381:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1366,
                  "mutability": "mutable",
                  "name": "_users",
                  "nameLocation": "2431:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1431,
                  "src": "2405:32:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                    "typeString": "address payable[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1363,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2405:15:6",
                      "stateMutability": "payable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "id": 1365,
                    "length": {
                      "hexValue": "32",
                      "id": 1364,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2421:1:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "2405:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_payable_$2_storage_ptr",
                      "typeString": "address payable[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1370,
                  "mutability": "mutable",
                  "name": "_balances",
                  "nameLocation": "2465:9:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1431,
                  "src": "2447:27:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1367,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2447:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1369,
                    "length": {
                      "hexValue": "32",
                      "id": 1368,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2455:1:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "2447:10:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1372,
                  "mutability": "mutable",
                  "name": "_expiresAt",
                  "nameLocation": "2492:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1431,
                  "src": "2484:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1371,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2484:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1374,
                  "mutability": "mutable",
                  "name": "_challengePeriod",
                  "nameLocation": "2520:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1431,
                  "src": "2512:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1373,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2512:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2348:194:6"
            },
            "returnParameters": {
              "id": 1378,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1377,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1431,
                  "src": "2567:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1376,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2567:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2566:9:6"
            },
            "scope": 1507,
            "src": "2333:973:6",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1505,
              "nodeType": "Block",
              "src": "3548:1293:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "50726564696374425043416464726573732e7072656469637428292063616c6c6564",
                        "id": 1455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3570:36:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d8cf12dffa26bb2c5422f7ca2466ca7706c9f9782274895d0acf8c6b5b5bc360",
                          "typeString": "literal_string \"PredictBPCAddress.predict() called\""
                        },
                        "value": "PredictBPCAddress.predict() called"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_d8cf12dffa26bb2c5422f7ca2466ca7706c9f9782274895d0acf8c6b5b5bc360",
                          "typeString": "literal_string \"PredictBPCAddress.predict() called\""
                        }
                      ],
                      "expression": {
                        "id": 1452,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "3558:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1454,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2724,
                      "src": "3558:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) view"
                      }
                    },
                    "id": 1456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3558:49:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1457,
                  "nodeType": "ExpressionStatement",
                  "src": "3558:49:6"
                },
                {
                  "assignments": [
                    1459
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1459,
                      "mutability": "mutable",
                      "name": "predictedAddress",
                      "nameLocation": "3824:16:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1505,
                      "src": "3816:24:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1458,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3816:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1496,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "hexValue": "30786666",
                                            "id": 1471,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "4006:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_255_by_1",
                                              "typeString": "int_const 255"
                                            },
                                            "value": "0xff"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_rational_255_by_1",
                                              "typeString": "int_const 255"
                                            }
                                          ],
                                          "id": 1470,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "3999:6:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_bytes1_$",
                                            "typeString": "type(bytes1)"
                                          },
                                          "typeName": {
                                            "id": 1469,
                                            "name": "bytes1",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "3999:6:6",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 1472,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "3999:12:6",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        }
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "id": 1475,
                                            "name": "this",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -28,
                                            "src": "4049:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_PredictBPCAddress_$1507",
                                              "typeString": "contract PredictBPCAddress"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_PredictBPCAddress_$1507",
                                              "typeString": "contract PredictBPCAddress"
                                            }
                                          ],
                                          "id": 1474,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "4041:7:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 1473,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "4041:7:6",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 1476,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "4041:13:6",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 1477,
                                        "name": "_salt",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1433,
                                        "src": "4084:5:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 1482,
                                                      "name": "BiDirectionalPaymentChannel",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 580,
                                                      "src": "4221:27:6",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_type$_t_contract$_BiDirectionalPaymentChannel_$580_$",
                                                        "typeString": "type(contract BiDirectionalPaymentChannel)"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_type$_t_contract$_BiDirectionalPaymentChannel_$580_$",
                                                        "typeString": "type(contract BiDirectionalPaymentChannel)"
                                                      }
                                                    ],
                                                    "id": 1481,
                                                    "name": "type",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": -27,
                                                    "src": "4216:4:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                                      "typeString": "function () pure"
                                                    }
                                                  },
                                                  "id": 1483,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "4216:33:6",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_magic_meta_type_t_contract$_BiDirectionalPaymentChannel_$580",
                                                    "typeString": "type(contract BiDirectionalPaymentChannel)"
                                                  }
                                                },
                                                "id": 1484,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "memberName": "creationCode",
                                                "nodeType": "MemberAccess",
                                                "src": "4216:87:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bytes_memory_ptr",
                                                  "typeString": "bytes memory"
                                                }
                                              },
                                              {
                                                "id": 1485,
                                                "name": "_users",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1439,
                                                "src": "4341:6:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                                                  "typeString": "address payable[2] memory"
                                                }
                                              },
                                              {
                                                "id": 1486,
                                                "name": "_balances",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1443,
                                                "src": "4385:9:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                                  "typeString": "uint256[2] memory"
                                                }
                                              },
                                              {
                                                "id": 1487,
                                                "name": "_expiresAt",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1445,
                                                "src": "4432:10:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              {
                                                "id": 1488,
                                                "name": "_challengePeriod",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1447,
                                                "src": "4480:16:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_bytes_memory_ptr",
                                                  "typeString": "bytes memory"
                                                },
                                                {
                                                  "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                                                  "typeString": "address payable[2] memory"
                                                },
                                                {
                                                  "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                                  "typeString": "uint256[2] memory"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "expression": {
                                                "id": 1479,
                                                "name": "abi",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": -1,
                                                "src": "4162:3:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_magic_abi",
                                                  "typeString": "abi"
                                                }
                                              },
                                              "id": 1480,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "memberName": "encodePacked",
                                              "nodeType": "MemberAccess",
                                              "src": "4162:16:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                                "typeString": "function () pure returns (bytes memory)"
                                              }
                                            },
                                            "id": 1489,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "4162:368:6",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          ],
                                          "id": 1478,
                                          "name": "keccak256",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -8,
                                          "src": "4119:9:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                            "typeString": "function (bytes memory) pure returns (bytes32)"
                                          }
                                        },
                                        "id": 1490,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "4119:441:6",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        },
                                        {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      ],
                                      "expression": {
                                        "id": 1467,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -1,
                                        "src": "3953:3:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 1468,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "encodePacked",
                                      "nodeType": "MemberAccess",
                                      "src": "3953:16:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                        "typeString": "function () pure returns (bytes memory)"
                                      }
                                    },
                                    "id": 1491,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3953:633:6",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "id": 1466,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -8,
                                  "src": "3918:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 1492,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3918:690:6",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "id": 1465,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3889:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 1464,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "3889:7:6",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1493,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3889:737:6",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1463,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3864:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint160_$",
                            "typeString": "type(uint160)"
                          },
                          "typeName": {
                            "id": 1462,
                            "name": "uint160",
                            "nodeType": "ElementaryTypeName",
                            "src": "3864:7:6",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1494,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3864:776:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      ],
                      "id": 1461,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3843:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 1460,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3843:7:6",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 1495,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3843:807:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3816:834:6"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "50726564696374425043416464726573732e70726564696374282920706173736564",
                        "id": 1500,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4764:36:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_db7e4da8d5a37e340e3fcdeab1e4be5abbc8504cdf235d9ada952afa695028b4",
                          "typeString": "literal_string \"PredictBPCAddress.predict() passed\""
                        },
                        "value": "PredictBPCAddress.predict() passed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_db7e4da8d5a37e340e3fcdeab1e4be5abbc8504cdf235d9ada952afa695028b4",
                          "typeString": "literal_string \"PredictBPCAddress.predict() passed\""
                        }
                      ],
                      "expression": {
                        "id": 1497,
                        "name": "console",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10193,
                        "src": "4752:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_console_$10193_$",
                          "typeString": "type(library console)"
                        }
                      },
                      "id": 1499,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "log",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2724,
                      "src": "4752:11:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) view"
                      }
                    },
                    "id": 1501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4752:49:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1502,
                  "nodeType": "ExpressionStatement",
                  "src": "4752:49:6"
                },
                {
                  "expression": {
                    "id": 1503,
                    "name": "predictedAddress",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1459,
                    "src": "4818:16:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1451,
                  "id": 1504,
                  "nodeType": "Return",
                  "src": "4811:23:6"
                }
              ]
            },
            "functionSelector": "2801067d",
            "id": 1506,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "predict",
            "nameLocation": "3321:7:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1448,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1433,
                  "mutability": "mutable",
                  "name": "_salt",
                  "nameLocation": "3346:5:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1506,
                  "src": "3338:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1432,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3338:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1435,
                  "mutability": "mutable",
                  "name": "_value",
                  "nameLocation": "3369:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1506,
                  "src": "3361:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1434,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3361:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1439,
                  "mutability": "mutable",
                  "name": "_users",
                  "nameLocation": "3411:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1506,
                  "src": "3385:32:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_payable_$2_memory_ptr",
                    "typeString": "address payable[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1436,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3385:15:6",
                      "stateMutability": "payable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "id": 1438,
                    "length": {
                      "hexValue": "32",
                      "id": 1437,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3401:1:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "3385:18:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_payable_$2_storage_ptr",
                      "typeString": "address payable[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1443,
                  "mutability": "mutable",
                  "name": "_balances",
                  "nameLocation": "3445:9:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1506,
                  "src": "3427:27:6",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1440,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3427:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1442,
                    "length": {
                      "hexValue": "32",
                      "id": 1441,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3435:1:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "3427:10:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1445,
                  "mutability": "mutable",
                  "name": "_expiresAt",
                  "nameLocation": "3472:10:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1506,
                  "src": "3464:18:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1444,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3464:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1447,
                  "mutability": "mutable",
                  "name": "_challengePeriod",
                  "nameLocation": "3500:16:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1506,
                  "src": "3492:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1446,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3492:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3328:194:6"
            },
            "returnParameters": {
              "id": 1451,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1450,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1506,
                  "src": "3539:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1449,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3539:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3538:9:6"
            },
            "scope": 1507,
            "src": "3312:1529:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1508,
        "src": "119:4724:6",
        "usedErrors": []
      }
    ],
    "src": "32:4812:6"
  },
  "bytecode": "608060405234801561001057600080fd5b5061003c604051806060016040528060268152602001612a2b6026913961004160201b61016c1760201c565b610101565b6100888160405160240161005591906100ac565b60408051601f198184030181529190526020810180516001600160e01b0390811663104c13eb60e21b1790915261008b16565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060208083528351808285015260005b818110156100d9578581018301518582016040015282016100bd565b818111156100eb576000604083870101525b50601f01601f1916929092016040019392505050565b61291b806101106000396000f3fe6080604052600436106200003d5760003560e01c80632801067d146200008f578063d0c7bbf314620000d1578063d41c72d214620000e8576200006b565b366200006b5762000069604051806060016040528060318152602001620028236031913934336200011c565b005b6200006960405180606001604052806023815260200162002800602391396200016c565b3480156200009c57600080fd5b50620000b4620000ae366004620005aa565b620001b6565b6040516001600160a01b0390911681526020015b60405180910390f35b620000b4620000e2366004620005aa565b620002cb565b348015620000f557600080fd5b506200010d62000107366004620005aa565b620003df565b604051620000c89190620006c2565b620001678383836040516024016200013793929190620006de565b60408051601f198184030181529190526020810180516001600160e01b031663e3849f7960e01b17905262000458565b505050565b620001b381604051602401620001839190620006c2565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905262000458565b50565b6000620001dc60405180606001604052806022815260200162002875602291396200016c565b600060ff60f81b308960405180602001620001f7906200050e565b601f1982820381018352601f9091011660408190526200022391908b908b908b908b9060200162000713565b604051602081830303815290604052805190602001206040516020016200028194939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b6040516020818303038152906040528051906020012060001c9050620002c060405180606001604052806022815260200162002897602291396200016c565b979650505050505050565b6000620002f160405180606001604052806021815260200162002854602191396200016c565b6200032b6040518060400160405280601681526020017518dbdb9d1c9858dd0818985b185b98d9481a5cc8095960521b8152504762000479565b620003556040518060400160405280600781526020016653616c7420697360c81b8152506200016c565b6200036087620004c6565b6200038f6040518060400160405280600b81526020016a15985b1d59481a5cc8095960aa1b8152508762000479565b868686868686604051620003a3906200050e565b620003b29493929190620007f4565b82906040518091039083f591505080158015620003d3573d6000803e3d6000fd5b50979650505050505050565b6060620004056040518060600160405280602d8152602001620028b9602d91396200016c565b868686868686604051602401620004229695949392919062000825565b60408051601f198184030181529190526020810180516001600160e01b031663d0c7bbf360e01b17905290509695505050505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b620004c282826040516024016200049292919062000866565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905262000458565b5050565b620001b381604051602401620004de91815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b17905262000458565b611f75806200088b83390190565b6040805190810167ffffffffffffffff811182821017156200054e57634e487b7160e01b600052604160045260246000fd5b60405290565b600082601f8301126200056657600080fd5b620005706200051c565b8060408401858111156200058357600080fd5b845b818110156200059f57803584526020938401930162000585565b509095945050505050565b6000806000806000806101008789031215620005c557600080fd5b86359550602080880135955088605f890112620005e157600080fd5b620005eb6200051c565b8060808a018b811115620005fe57600080fd5b60408b015b81811015620006335780356001600160a01b0381168114620006255760008081fd5b845292840192840162000603565b50819750620006438c8262000554565b96505050505060c0870135915060e087013590509295509295509295565b60005b838110156200067e57818101518382015260200162000664565b838111156200068e576000848401525b50505050565b60008151808452620006ae81602086016020860162000661565b601f01601f19169290920160200192915050565b602081526000620006d7602083018462000694565b9392505050565b606081526000620006f3606083018662000694565b6020830194909452506001600160a01b0391909116604090910152919050565b600086516020620007288285838c0162000661565b90830190818860005b6002811015620007595781516001600160a01b03168552938301939083019060010162000731565b50506040810192508760005b6002811015620007845781518552938301939083019060010162000765565b505060808101969096525050505060a082015260c0019392505050565b8060005b60028110156200068e5781516001600160a01b0316845260209384019390910190600101620007a5565b8060005b60028110156200068e578151845260209384019390910190600101620007d3565b60c08101620008048287620007a1565b620008136040830186620007cf565b608082019390935260a0015292915050565b868152602081018690526101008101620008436040830187620007a1565b620008526080830186620007cf565b60c082019390935260e00152949350505050565b6040815260006200087b604083018562000694565b9050826020830152939250505056fe608060405260405162001f7538038062001f758339810160408190526200002691620004e3565b826200005660405180606001604052806032815260200162001f43603291396200037b60201b62000b151760201c565b6200008e6040518060600160405280603b815260200162001ed6603b9139825160208085015147929162000b5b620003c9821b17901c565b6020808201518251620000ad9290919062000baa62000420821b17901c565b471015620001285760405162461bcd60e51b815260206004820152603c60248201527f62616c616e6365206f6620636f6e7472616374206d757374206265203e3d207460448201527f6f2074686520746f74616c2062616c616e6365206f662075736572730000000060648201526084015b60405180910390fd5b6200015760405180606001604052806029815260200162001ead602991396200037b60201b62000b151760201c565b428311620001a85760405162461bcd60e51b815260206004820152601860248201527f45787069726174696f6e206d757374206265203e206e6f77000000000000000060448201526064016200011f565b60008211620001fa5760405162461bcd60e51b815260206004820152601c60248201527f4368616c6c656e676520706572696f64206d757374206265203e20300000000060448201526064016200011f565b60005b6002811015620003355760008682600281106200021e576200021e62000583565b602090810291909101516001600160a01b0381166000908152600290925260409091205490915060ff1615620002975760405162461bcd60e51b815260206004820152601360248201527f75736572206d75737420626520756e697175650000000000000000000000000060448201526064016200011f565b8060008360028110620002ae57620002ae62000583565b0180546001600160a01b0319166001600160a01b0392831617905581166000908152600260208190526040909120805460ff19166001179055869083908110620002fc57620002fc62000583565b602090810291909101516001600160a01b03909216600090815260039091526040902055806200032c81620005af565b915050620001fd565b50600583905560048290556040805160608101909152603280825262000370919062001f1160208301396200037b60201b62000b151760201c565b50505050506200067c565b620003c6816040516024016200039291906200061b565b60408051601f198184030181529190526020810180516001600160e01b0390811663104c13eb60e21b179091526200043516565b50565b6200041a84848484604051602401620003e6949392919062000630565b60408051601f198184030181529190526020810180516001600160e01b039081166304772b3360e11b179091526200043516565b50505050565b60006200042e828462000661565b9392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604080519081016001600160401b03811182821017156200048757634e487b7160e01b600052604160045260246000fd5b60405290565b600082601f8301126200049f57600080fd5b620004a962000456565b806040840185811115620004bc57600080fd5b845b81811015620004d8578051845260209384019301620004be565b509095945050505050565b60008060008060c08587031215620004fa57600080fd5b85601f8601126200050a57600080fd5b6200051462000456565b8060408701888111156200052757600080fd5b875b818110156200055a5780516001600160a01b03811681146200054b5760008081fd5b84526020938401930162000529565b508196506200056a89826200048d565b608089015160a090990151979a90995095505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620005c457620005c462000599565b5060010190565b6000815180845260005b81811015620005f357602081850181015186830182015201620005d5565b8181111562000606576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006200042e6020830184620005cb565b608081526000620006456080830187620005cb565b6020830195909552506040810192909252606090910152919050565b6000821982111562000677576200067762000599565b500190565b611821806200068c6000396000f3fe60806040526004361061008a5760003560e01c80634209fff1116100595780634209fff1146101945780638622a689146101c4578063a0ff4999146101da578063affed0e0146101fa578063f3f480d914610210576100b4565b806321e66868146100d757806327e235e31461010c578063365b98b2146101475780633ccfd60b1461017f576100b4565b366100b4576100b26040518060600160405280603b8152602001611681603b91393433610226565b005b6100b26040518060600160405280603c81526020016115bb603c91393433610226565b3480156100e357600080fd5b506100f76100f2366004611231565b610272565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b506101396101273660046112ed565b60036020526000908152604090205481565b604051908152602001610103565b34801561015357600080fd5b50610167610162366004611308565b61053b565b6040516001600160a01b039091168152602001610103565b34801561018b57600080fd5b506100b261055b565b3480156101a057600080fd5b506100f76101af3660046112ed565b60026020526000908152604090205460ff1681565b3480156101d057600080fd5b5061013960055481565b3480156101e657600080fd5b506100b26101f5366004611321565b61070b565b34801561020657600080fd5b5061013960065481565b34801561021c57600080fd5b5061013960045481565b61026d83838360405160240161023e939291906113c6565b60408051601f198184030181529190526020810180516001600160e01b031663e3849f7960e01b179052610bbd565b505050565b60006102956040518060600160405280602b8152602001611656602b9139610b15565b6102c26040518060400160405280600b81526020016a1b9bdb98d9481a5cc8095960aa1b81525083610bde565b60005b600281101561052c57610319604051806040016040528060128152602001715f7369676e6572735b25645d20697320257360701b8152508287846002811061030f5761030f6113f9565b6020020151610226565b610365604051806040016040528060138152602001725f62616c616e6365735b25645d20697320257360681b8152508286846002811061035b5761035b6113f9565b6020020151610c27565b600061043a88836002811061037c5761037c6113f9565b602002015161043489888660028110610397576103976113f9565b6020020151886040516020016103d49392919060609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b90610c6e565b905061046b6040518060400160405280600d81526020016c6465636f64656420697320257360981b81525082610c92565b60006104da898460028110610482576104826113f9565b60200201516104348a89876002811061049d5761049d6113f9565b6020020151896040516020016103d49392919060609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b6001600160a01b03168784600281106104f5576104f56113f9565b60200201516001600160a01b0316149050806105175760009350505050610532565b5050808061052490611425565b9150506102c5565b50600190505b95945050505050565b6000816002811061054b57600080fd5b01546001600160a01b0316905081565b61057c6040518060600160405280602d8152602001611629602d9139610b15565b3360009081526002602052604090205460ff166105cb5760405162461bcd60e51b81526020600482015260086024820152672737ba103ab9b2b960c11b60448201526064015b60405180910390fd5b6105ec6040518060600160405280602d81526020016116e7602d9139610b15565b33600081815260036020526040808220805490839055905190929083908381818185875af1925050503d8060008114610641576040519150601f19603f3d011682016040523d82523d6000602084013e610646565b606091505b505090508061068e5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016105c2565b6106b1604051806080016040528060438152602001611714604391393384610cd7565b60405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250506107096040518060600160405280602d8152602001611757602d9139610b15565b565b61072c6040518060600160405280602d8152602001611629602d9139610b15565b3360009081526002602052604090205460ff166107765760405162461bcd60e51b81526020600482015260086024820152672737ba103ab9b2b960c11b60448201526064016105c2565b80838361079a6040518060600160405280603481526020016117b860349139610b15565b6107a2611068565b60005b600281101561080357600081600281106107c1576107c16113f9565b01546001600160a01b03168282600281106107de576107de6113f9565b6001600160a01b039092166020929092020152806107fb81611425565b9150506107a5565b506108118430838686610272565b6108515760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016105c2565b866108736040518060600160405280603281526020016115f760329139610b15565b61089e6040518060600160405280603b815260200161154e603b913982516020840151479190610b5b565b602081015181516108ae91610baa565b4710156109235760405162461bcd60e51b815260206004820152603c60248201527f62616c616e6365206f6620636f6e7472616374206d757374206265203e3d207460448201527f6f2074686520746f74616c2062616c616e6365206f662075736572730000000060648201526084016105c2565b6109446040518060600160405280602b81526020016116bc602b9139610b15565b60055442106109955760405162461bcd60e51b815260206004820152601860248201527f45787069726564206368616c6c656e676520706572696f64000000000000000060448201526064016105c2565b60065487116109fb5760405162461bcd60e51b815260206004820152602c60248201527f4e6f6e6365206d7573742062652067726561746572207468616e20746865206360448201526b757272656e74206e6f6e636560a01b60648201526084016105c2565b60005b6002811015610a6257888160028110610a1957610a196113f9565b602002015160036000808460028110610a3457610a346113f9565b01546001600160a01b0316815260208101919091526040016000205580610a5a81611425565b9150506109fe565b506006879055600454610a76904290610baa565b60055560065460405190815233907f5050c6e2a6fc173775ce4852f893c9e5aaeff00101f3aef75e0ec263cf083ca99060200160405180910390a2610ad260405180606001604052806032815260200161158960329139610b15565b50610af460405180606001604052806034815260200161178460349139610b15565b5050505061026d6040518060600160405280602d8152602001611757602d91395b610b5881604051602401610b29919061143e565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610bbd565b50565b610ba484848484604051602401610b759493929190611451565b60408051601f198184030181529190526020810180516001600160e01b03166304772b3360e11b179052610bbd565b50505050565b6000610bb68284611480565b9392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b610c238282604051602401610bf4929190611498565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052610bbd565b5050565b61026d838383604051602401610c3f939291906114ba565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b179052610bbd565b6000806000610c7d8585610d1e565b91509150610c8a81610d8c565b509392505050565b610c238282604051602401610ca89291906114df565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610bbd565b61026d838383604051602401610cef93929190611509565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b179052610bbd565b6000808251604103610d545760208301516040840151606085015160001a610d4887828585610f42565b94509450505050610d85565b8251604003610d7d5760208301516040840151610d7286838361102f565b935093505050610d85565b506000905060025b9250929050565b6000816004811115610da057610da0611537565b03610da85750565b6001816004811115610dbc57610dbc611537565b03610e095760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105c2565b6002816004811115610e1d57610e1d611537565b03610e6a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105c2565b6003816004811115610e7e57610e7e611537565b03610ed65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105c2565b6004816004811115610eea57610eea611537565b03610b585760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105c2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f795750600090506003611026565b8460ff16601b14158015610f9157508460ff16601c14155b15610fa25750600090506004611026565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610ff6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661101f57600060019250925050611026565b9150600090505b94509492505050565b6000806001600160ff1b0383168161104c60ff86901c601b611480565b905061105a87828885610f42565b935093505050935093915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110bf576110bf611086565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156110ee576110ee611086565b604052919050565b6000601f838184011261110857600080fd5b61111061109c565b80604085018681111561112257600080fd5b855b818110156111b957803567ffffffffffffffff808211156111455760008081fd5b818901915089878301126111595760008081fd5b813560208282111561116d5761116d611086565b61117e828a01601f191682016110c5565b92508183528b818386010111156111955760008081fd5b81818501828501376000918301810191909152908652949094019350602001611124565b50909695505050505050565b80356001600160a01b03811681146111dc57600080fd5b919050565b600082601f8301126111f257600080fd5b6111fa61109c565b80604084018581111561120c57600080fd5b845b8181101561122657803584526020938401930161120e565b509095945050505050565b600080600080600060e0868803121561124957600080fd5b853567ffffffffffffffff81111561126057600080fd5b61126c888289016110f6565b955050602061127c8188016111c5565b945087605f88011261128d57600080fd5b61129561109c565b80608089018a8111156112a757600080fd5b60408a015b818110156112ca576112bd816111c5565b84529284019284016112ac565b508196506112d88b826111e1565b989b979a50959860c001359695505050505050565b6000602082840312156112ff57600080fd5b610bb6826111c5565b60006020828403121561131a57600080fd5b5035919050565b60008060006080848603121561133657600080fd5b61134085856111e1565b925060408401359150606084013567ffffffffffffffff81111561136357600080fd5b61136f868287016110f6565b9150509250925092565b6000815180845260005b8181101561139f57602081850181015186830182015201611383565b818111156113b1576000602083870101525b50601f01601f19169290920160200192915050565b6060815260006113d96060830186611379565b6020830194909452506001600160a01b0391909116604090910152919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016114375761143761140f565b5060010190565b602081526000610bb66020830184611379565b6080815260006114646080830187611379565b6020830195909552506040810192909252606090910152919050565b600082198211156114935761149361140f565b500190565b6040815260006114ab6040830185611379565b90508260208301529392505050565b6060815260006114cd6060830186611379565b60208301949094525060400152919050565b6040815260006114f26040830185611379565b905060018060a01b03831660208301529392505050565b60608152600061151c6060830186611379565b6001600160a01b039490941660208301525060400152919050565b634e487b7160e01b600052602160045260246000fdfe636f6e74726163742062616c616e63652069732025642c2062616c616e6365735b305d2069732025642c62616c616e6365735b315d2069732025644269446972656374696f6e616c5061796d656e744368616e6e656c2e636865636b42616c616e6365732829207061737365644269446972656374696f6e616c5061796d656e744368616e6e656c2e66616c6c6261636b28292c20526563656976696e672025642066726f6d2025734269446972656374696f6e616c5061796d656e744368616e6e656c2e636865636b42616c616e63657328292063616c6c65644269446972656374696f6e616c5061796d656e744368616e6e656c2e6f6e6c795573657228292063616c6c65644269446972656374696f6e616c5061796d656e744368616e6e656c2e76657269667928292063616c6c65644269446972656374696f6e616c5061796d656e744368616e6e656c2e7265636569766528292c20526563656976696e672025642066726f6d2025734269446972656374696f6e616c5061796d656e744368616e6e656c2e6368616c6c656e67654578697428294269446972656374696f6e616c5061796d656e744368616e6e656c2e776974686472617728292063616c6c65644269446972656374696f6e616c5061796d656e744368616e6e656c2e776974686472617728292c206d73672e73656e6465722069732025732c20616d6f756e743d25644269446972656374696f6e616c5061796d656e744368616e6e656c2e6f6e6c79557365722829207061737365644269446972656374696f6e616c5061796d656e744368616e6e656c2e636865636b5369676e6174757265732829207061737365644269446972656374696f6e616c5061796d656e744368616e6e656c2e636865636b5369676e61747572657328292063616c6c6564a2646970667358221220661d6f2d91cd38a2352e4ab10cecfa1ca623461022952e79075fcb9b7e70164864736f6c634300080e00334269446972656374696f6e616c5061796d656e744368616e6e656c2e636f6e7374727563746f722829636f6e74726163742062616c616e63652069732025642c2062616c616e6365735b305d2069732025642c62616c616e6365735b315d2069732025644269446972656374696f6e616c5061796d656e744368616e6e656c2e636865636b42616c616e6365732829207061737365644269446972656374696f6e616c5061796d656e744368616e6e656c2e636865636b42616c616e63657328292063616c6c656450726564696374425043416464726573732e66616c6c6261636b28292063616c6c656450726564696374425043416464726573732e7265636569766528292c20726563656976696e672025642066726f6d20257350726564696374425043416464726573732e6465706c6f7928292063616c6c656450726564696374425043416464726573732e7072656469637428292063616c6c656450726564696374425043416464726573732e7072656469637428292070617373656450726564696374425043416464726573732e676574456e636f64656443616c6c4461746128292063616c6c6564a26469706673582212208d3d883340aa6b182372d84b8ded692e649bbebd8d1e39af6fc7cbf88aed0f6c64736f6c634300080e003350726564696374425043416464726573732e636f6e7374727563746f7228292063616c6c6564",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.14+commit.80d49f37"
  },
  "contractName": "PredictBPCAddress",
  "coverageMap": {
    "branches": {
      "1": {},
      "10": {},
      "2": {},
      "3": {},
      "4": {},
      "6": {}
    },
    "statements": {
      "1": {},
      "10": {
        "console.log": {
          "2": [
            10380,
            10460
          ],
          "3": [
            5102,
            5161
          ],
          "15": [
            5945,
            6013
          ]
        },
        "console.logBytes32": {
          "16": [
            4882,
            4942
          ]
        }
      },
      "2": {},
      "3": {},
      "4": {},
      "6": {
        "PredictBPCAddress.<fallback>": {
          "1": [
            804,
            854
          ]
        },
        "PredictBPCAddress.<receive>": {
          "0": [
            279,
            412
          ]
        },
        "PredictBPCAddress.deploy": {
          "7": [
            2586,
            2634
          ],
          "8": [
            2644,
            2704
          ],
          "9": [
            2924,
            2946
          ],
          "10": [
            2956,
            2981
          ],
          "11": [
            2991,
            3025
          ],
          "12": [
            3035,
            3299
          ]
        },
        "PredictBPCAddress.getDeployEncodedCallData": {
          "13": [
            1953,
            2013
          ],
          "14": [
            2023,
            2320
          ]
        },
        "PredictBPCAddress.predict": {
          "4": [
            3558,
            3607
          ],
          "5": [
            4752,
            4801
          ],
          "6": [
            4811,
            4834
          ]
        }
      }
    }
  },
  "dependencies": [
    "BiDirectionalPaymentChannel",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/ECDSA",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/SafeMath",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/Strings",
    "console"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "119:4724:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;279:133;;;;;;;;;;;;;;;;;;369:9;392:10;279:11;:133::i;:::-;119:4724;;804:50;;;;;;;;;;;;;;;;;;:11;:50::i;3312:1529::-;;;;;;;;;;-1:-1:-1;3312:1529:6;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2189:32:11;;;2171:51;;2159:2;2144:18;3312:1529:6;;;;;;;;2333:973;;;;;;:::i;:::-;;:::i;1680:647::-;;;;;;;;;;-1:-1:-1;1680:647:6;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;10310:154:10:-;10380:80;10448:2;10452;10456;10396:63;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;10396:63:10;;;;;;;;;;;;;;-1:-1:-1;;;;;10396:63:10;-1:-1:-1;;;10396:63:10;;;10380:15;:80::i;:::-;10310:154;;;:::o;5053:112::-;5102:59;5157:2;5118:42;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5118:42:10;;;;;;;;;;;;;;-1:-1:-1;;;;;5118:42:10;-1:-1:-1;;;5118:42:10;;;5102:15;:59::i;:::-;5053:112;:::o;3312:1529:6:-;3539:7;3558:49;;;;;;;;;;;;;;;;;;:11;:49::i;:::-;3816:24;4006:4;3999:12;;4049:4;4084:5;4216:87;;;;;;;;:::i;:::-;-1:-1:-1;;4216:87:6;;;;;;;;;;;;;;;;4162:368;;4216:87;4341:6;;4385:9;;4432:10;;4480:16;;4216:87;4162:368;;:::i;:::-;;;;;;;;;;;;;4119:441;;;;;;3953:633;;;;;;;;;;-1:-1:-1;;;;;;5067:26:11;;;;5055:39;;5131:2;5127:15;;;;-1:-1:-1;;5123:53:11;5119:1;5110:11;;5103:74;5202:2;5193:12;;5186:28;5239:2;5230:12;;5223:28;5276:2;5267:12;;4844:441;3953:633:6;;;;;;;;;;;;;3918:690;;;;;;3889:737;;3816:834;;4752:49;;;;;;;;;;;;;;;;;;:11;:49::i;:::-;4818:16;3312:1529;-1:-1:-1;;;;;;;3312:1529:6:o;2333:973::-;2567:7;2586:48;;;;;;;;;;;;;;;;;;:11;:48::i;:::-;2644:60;;;;;;;;;;;;;;-1:-1:-1;;;2644:60:6;;;2682:21;2644:11;:60::i;:::-;2924:22;;;;;;;;;;;;;;-1:-1:-1;;;2924:22:6;;;:11;:22::i;:::-;2956:25;2975:5;2956:18;:25::i;:::-;2991:34;;;;;;;;;;;;;;-1:-1:-1;;;2991:34:6;;;3018:6;2991:11;:34::i;:::-;3117:5;3131:6;3160;3188:9;3219:10;3251:16;3079:206;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;3079:206:6;;;;;;;;;;;;;;-1:-1:-1;3035:264:6;2333:973;-1:-1:-1;;;;;;;2333:973:6:o;1680:647::-;1929:12;1953:60;;;;;;;;;;;;;;;;;;:11;:60::i;:::-;2164:5;2187:6;2211;2235:9;2262:10;2290:16;2042:278;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2042:278:6;;;;;;;;;;;;;;-1:-1:-1;;;;;2042:278:6;-1:-1:-1;;;2042:278:6;;;;-1:-1:-1;1680:647:6;;;;;;;;:::o;175:288:10:-;263:14;;128:42;372:2;359:16;;239:21;;263:14;359:16;128:42;399:5;388:68;379:77;;334:126;;175:288;:::o;5887:130::-;5945:68;6005:2;6009;5961:51;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5961:51:10;;;;;;;;;;;;;;-1:-1:-1;;;;;5961:51:10;-1:-1:-1;;;5961:51:10;;;5945:15;:68::i;:::-;5887:130;;:::o;4832:114::-;4882:60;4938:2;4898:43;;;;;;7670:25:11;;7658:2;7643:18;;7524:177;4898:43:10;;;;-1:-1:-1;;4898:43:10;;;;;;;;;;;;;;-1:-1:-1;;;;;4898:43:10;-1:-1:-1;;;4898:43:10;;;4882:15;:60::i;-1:-1:-1:-;;;;;;;;:::o;14:343:11:-;81:2;75:9;;;111:15;;156:18;141:34;;177:22;;;138:62;135:185;;;242:10;237:3;233:20;230:1;223:31;277:4;274:1;267:15;305:4;302:1;295:15;135:185;336:2;329:22;14:343;:::o;362:479::-;412:5;465:3;458:4;450:6;446:17;442:27;432:55;;483:1;480;473:12;432:55;507:17;;:::i;:::-;546:3;584:2;576:6;572:15;610:3;602:6;599:15;596:35;;;627:1;624;617:12;596:35;651:6;666:146;682:6;677:3;674:15;666:146;;;750:17;;738:30;;797:4;788:14;;;;699;666:146;;;-1:-1:-1;830:5:11;;362:479;-1:-1:-1;;;;;362:479:11:o;846:1174::-;1004:6;1012;1020;1028;1036;1044;1097:3;1085:9;1076:7;1072:23;1068:33;1065:53;;;1114:1;1111;1104:12;1065:53;1150:9;1137:23;1127:33;;1179:2;1228;1217:9;1213:18;1200:32;1190:42;;1275:7;1270:2;1259:9;1255:18;1251:32;1241:60;;1297:1;1294;1287:12;1241:60;1321:17;;:::i;:::-;1360:3;1401;1390:9;1386:19;1428:7;1420:6;1417:19;1414:39;;;1449:1;1446;1439:12;1414:39;1488:2;1477:9;1473:18;1500:326;1516:6;1511:3;1508:15;1500:326;;;1583:17;;-1:-1:-1;;;;;1633:31:11;;1623:42;;1613:140;;1707:1;1736:2;1732;1725:14;1613:140;1766:18;;1804:12;;;;1533;;1500:326;;;1504:3;1845:5;1835:15;;1869:41;1902:7;1894:6;1869:41;:::i;:::-;1859:51;;;;;;1957:3;1946:9;1942:19;1929:33;1919:43;;2009:3;1998:9;1994:19;1981:33;1971:43;;846:1174;;;;;;;;:::o;2233:258::-;2305:1;2315:113;2329:6;2326:1;2323:13;2315:113;;;2405:11;;;2399:18;2386:11;;;2379:39;2351:2;2344:10;2315:113;;;2446:6;2443:1;2440:13;2437:48;;;2481:1;2472:6;2467:3;2463:16;2456:27;2437:48;;2233:258;;;:::o;2496:257::-;2537:3;2575:5;2569:12;2602:6;2597:3;2590:19;2618:63;2674:6;2667:4;2662:3;2658:14;2651:4;2644:5;2640:16;2618:63;:::i;:::-;2735:2;2714:15;-1:-1:-1;;2710:29:11;2701:39;;;;2742:4;2697:50;;2496:257;-1:-1:-1;;2496:257:11:o;2758:217::-;2905:2;2894:9;2887:21;2868:4;2925:44;2965:2;2954:9;2950:18;2942:6;2925:44;:::i;:::-;2917:52;2758:217;-1:-1:-1;;;2758:217:11:o;2980:387::-;3185:2;3174:9;3167:21;3148:4;3205:44;3245:2;3234:9;3230:18;3222:6;3205:44;:::i;:::-;3280:2;3265:18;;3258:34;;;;-1:-1:-1;;;;;;3328:32:11;;;;3323:2;3308:18;;;3301:60;3197:52;2980:387;-1:-1:-1;2980:387:11:o;3596:1243::-;3945:3;3983:6;3977:13;4009:4;4022:51;4066:6;4061:3;4056:2;4048:6;4044:15;4022:51;:::i;:::-;4095:16;;;;;4184:6;4208:1;4218:199;4232:4;4229:1;4226:11;4218:199;;;4297:13;;-1:-1:-1;;;;;4293:39:11;4279:54;;4355:14;;;;4392:15;;;;4329:1;4245:9;4218:199;;;4222:3;;4450:2;4443:5;4439:14;4426:27;;4501:6;4527:1;4537:185;4553:4;4548:3;4545:13;4537:185;;;4618:15;;4604:30;;4656:14;;;;4695:17;;;;4577:1;4568:11;4537:185;;;-1:-1:-1;;4749:3:11;4738:15;;4731:31;;;;-1:-1:-1;;;;4789:3:11;4778:15;;4771:31;4829:3;4818:15;;3596:1243;-1:-1:-1;;;3596:1243:11:o;5290:360::-;5391:5;5414:1;5424:220;5438:4;5435:1;5432:11;5424:220;;;5501:13;;-1:-1:-1;;;;;5497:39:11;5485:52;;5560:4;5584:12;;;;5619:15;;;;5533:1;5451:9;5424:220;;5655:326;5748:5;5771:1;5781:194;5795:4;5792:1;5789:11;5781:194;;;5854:13;;5842:26;;5891:4;5915:12;;;;5950:15;;;;5815:1;5808:9;5781:194;;5986:545;6312:3;6297:19;;6325:51;6301:9;6358:6;6325:51;:::i;:::-;6385:52;6433:2;6422:9;6418:18;6410:6;6385:52;:::i;:::-;6468:3;6453:19;;6446:35;;;;6512:3;6497:19;6490:35;5986:545;;-1:-1:-1;;5986:545:11:o;6536:688::-;6931:25;;;6987:2;6972:18;;6965:34;;;6918:3;6903:19;;7008:60;7064:2;7049:18;;7041:6;7008:60;:::i;:::-;7077:53;7125:3;7114:9;7110:19;7102:6;7077:53;:::i;:::-;7161:3;7146:19;;7139:35;;;;7205:3;7190:19;7183:35;6536:688;;-1:-1:-1;;;;6536:688:11:o;7229:290::-;7406:2;7395:9;7388:21;7369:4;7426:44;7466:2;7455:9;7451:18;7443:6;7426:44;:::i;:::-;7418:52;;7506:6;7501:2;7490:9;7486:18;7479:34;7229:290;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    119,
    4843
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2801067D EQ PUSH3 0x8F JUMPI DUP1 PUSH4 0xD0C7BBF3 EQ PUSH3 0xD1 JUMPI DUP1 PUSH4 0xD41C72D2 EQ PUSH3 0xE8 JUMPI PUSH3 0x6B JUMP JUMPDEST CALLDATASIZE PUSH3 0x6B JUMPI PUSH3 0x69 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2823 PUSH1 0x31 SWAP2 CODECOPY CALLVALUE CALLER PUSH3 0x11C JUMP JUMPDEST STOP JUMPDEST PUSH3 0x69 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2800 PUSH1 0x23 SWAP2 CODECOPY PUSH3 0x16C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xB4 PUSH3 0xAE CALLDATASIZE PUSH1 0x4 PUSH3 0x5AA JUMP JUMPDEST PUSH3 0x1B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xB4 PUSH3 0xE2 CALLDATASIZE PUSH1 0x4 PUSH3 0x5AA JUMP JUMPDEST PUSH3 0x2CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x10D PUSH3 0x107 CALLDATASIZE PUSH1 0x4 PUSH3 0x5AA JUMP JUMPDEST PUSH3 0x3DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xC8 SWAP2 SWAP1 PUSH3 0x6C2 JUMP JUMPDEST PUSH3 0x167 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x137 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x6DE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xE3849F79 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH3 0x458 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x1B3 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x183 SWAP2 SWAP1 PUSH3 0x6C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH3 0x458 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1DC PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2875 PUSH1 0x22 SWAP2 CODECOPY PUSH3 0x16C JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH1 0xF8 SHL ADDRESS DUP10 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0x1F7 SWAP1 PUSH3 0x50E JUMP JUMPDEST PUSH1 0x1F NOT DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x223 SWAP2 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x20 ADD PUSH3 0x713 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x281 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP PUSH3 0x2C0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2897 PUSH1 0x22 SWAP2 CODECOPY PUSH3 0x16C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2F1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2854 PUSH1 0x21 SWAP2 CODECOPY PUSH3 0x16C JUMP JUMPDEST PUSH3 0x32B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x16 DUP2 MSTORE PUSH1 0x20 ADD PUSH22 0x18DBDB9D1C9858DD0818985B185B98D9481A5CC80959 PUSH1 0x52 SHL DUP2 MSTORE POP SELFBALANCE PUSH3 0x479 JUMP JUMPDEST PUSH3 0x355 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x53616C74206973 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH3 0x16C JUMP JUMPDEST PUSH3 0x360 DUP8 PUSH3 0x4C6 JUMP JUMPDEST PUSH3 0x38F PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH11 0x15985B1D59481A5CC80959 PUSH1 0xAA SHL DUP2 MSTORE POP DUP8 PUSH3 0x479 JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH3 0x3A3 SWAP1 PUSH3 0x50E JUMP JUMPDEST PUSH3 0x3B2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x7F4 JUMP JUMPDEST DUP3 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 DUP4 CREATE2 SWAP2 POP POP DUP1 ISZERO DUP1 ISZERO PUSH3 0x3D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH3 0x405 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x28B9 PUSH1 0x2D SWAP2 CODECOPY PUSH3 0x16C JUMP JUMPDEST DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x422 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x825 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xD0C7BBF3 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH3 0x4C2 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x492 SWAP3 SWAP2 SWAP1 PUSH3 0x866 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x9710A9D PUSH1 0xE4 SHL OR SWAP1 MSTORE PUSH3 0x458 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x1B3 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x4DE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x27B7CF85 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH3 0x458 JUMP JUMPDEST PUSH2 0x1F75 DUP1 PUSH3 0x88B DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x54E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x570 PUSH3 0x51C JUMP JUMPDEST DUP1 PUSH1 0x40 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH3 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x59F JUMPI DUP1 CALLDATALOAD DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x585 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP1 DUP9 ADD CALLDATALOAD SWAP6 POP DUP9 PUSH1 0x5F DUP10 ADD SLT PUSH3 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5EB PUSH3 0x51C JUMP JUMPDEST DUP1 PUSH1 0x80 DUP11 ADD DUP12 DUP2 GT ISZERO PUSH3 0x5FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP12 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x633 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x625 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 DUP5 ADD PUSH3 0x603 JUMP JUMPDEST POP DUP2 SWAP8 POP PUSH3 0x643 DUP13 DUP3 PUSH3 0x554 JUMP JUMPDEST SWAP7 POP POP POP POP POP PUSH1 0xC0 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xE0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x67E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x664 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x68E JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x6AE DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x661 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x6D7 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x694 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH3 0x6F3 PUSH1 0x60 DUP4 ADD DUP7 PUSH3 0x694 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP7 MLOAD PUSH1 0x20 PUSH3 0x728 DUP3 DUP6 DUP4 DUP13 ADD PUSH3 0x661 JUMP JUMPDEST SWAP1 DUP4 ADD SWAP1 DUP2 DUP9 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH3 0x759 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x731 JUMP JUMPDEST POP POP PUSH1 0x40 DUP2 ADD SWAP3 POP DUP8 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH3 0x784 JUMPI DUP2 MLOAD DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x765 JUMP JUMPDEST POP POP PUSH1 0x80 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP POP POP PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH3 0x68E JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x7A5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH3 0x68E JUMPI DUP2 MLOAD DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x7D3 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH3 0x804 DUP3 DUP8 PUSH3 0x7A1 JUMP JUMPDEST PUSH3 0x813 PUSH1 0x40 DUP4 ADD DUP7 PUSH3 0x7CF JUMP JUMPDEST PUSH1 0x80 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xA0 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD PUSH3 0x843 PUSH1 0x40 DUP4 ADD DUP8 PUSH3 0x7A1 JUMP JUMPDEST PUSH3 0x852 PUSH1 0x80 DUP4 ADD DUP7 PUSH3 0x7CF JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xE0 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH3 0x87B PUSH1 0x40 DUP4 ADD DUP6 PUSH3 0x694 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH3 0x1F75 CODESIZE SUB DUP1 PUSH3 0x1F75 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x26 SWAP2 PUSH3 0x4E3 JUMP JUMPDEST DUP3 PUSH3 0x56 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1F43 PUSH1 0x32 SWAP2 CODECOPY PUSH3 0x37B PUSH1 0x20 SHL PUSH3 0xB15 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x8E PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3B DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1ED6 PUSH1 0x3B SWAP2 CODECOPY DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD MLOAD SELFBALANCE SWAP3 SWAP2 PUSH3 0xB5B PUSH3 0x3C9 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD DUP3 MLOAD PUSH3 0xAD SWAP3 SWAP1 SWAP2 SWAP1 PUSH3 0xBAA PUSH3 0x420 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST SELFBALANCE LT ISZERO PUSH3 0x128 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x62616C616E6365206F6620636F6E7472616374206D757374206265203E3D2074 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F2074686520746F74616C2062616C616E6365206F6620757365727300000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x157 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1EAD PUSH1 0x29 SWAP2 CODECOPY PUSH3 0x37B PUSH1 0x20 SHL PUSH3 0xB15 OR PUSH1 0x20 SHR JUMP JUMPDEST TIMESTAMP DUP4 GT PUSH3 0x1A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45787069726174696F6E206D757374206265203E206E6F770000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x11F JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH3 0x1FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4368616C6C656E676520706572696F64206D757374206265203E203000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x11F JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH3 0x335 JUMPI PUSH1 0x0 DUP7 DUP3 PUSH1 0x2 DUP2 LT PUSH3 0x21E JUMPI PUSH3 0x21E PUSH3 0x583 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH3 0x297 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x75736572206D75737420626520756E6971756500000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x11F JUMP JUMPDEST DUP1 PUSH1 0x0 DUP4 PUSH1 0x2 DUP2 LT PUSH3 0x2AE JUMPI PUSH3 0x2AE PUSH3 0x583 JUMP JUMPDEST ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP7 SWAP1 DUP4 SWAP1 DUP2 LT PUSH3 0x2FC JUMPI PUSH3 0x2FC PUSH3 0x583 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE DUP1 PUSH3 0x32C DUP2 PUSH3 0x5AF JUMP JUMPDEST SWAP2 POP POP PUSH3 0x1FD JUMP JUMPDEST POP PUSH1 0x5 DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x32 DUP1 DUP3 MSTORE PUSH3 0x370 SWAP2 SWAP1 PUSH3 0x1F11 PUSH1 0x20 DUP4 ADD CODECOPY PUSH3 0x37B PUSH1 0x20 SHL PUSH3 0xB15 OR PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP POP POP PUSH3 0x67C JUMP JUMPDEST PUSH3 0x3C6 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x392 SWAP2 SWAP1 PUSH3 0x61B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 SWAP2 MSTORE PUSH3 0x435 AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0x41A DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x3E6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x630 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND PUSH4 0x4772B33 PUSH1 0xE1 SHL OR SWAP1 SWAP2 MSTORE PUSH3 0x435 AND JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x42E DUP3 DUP5 PUSH3 0x661 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x487 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x4A9 PUSH3 0x456 JUMP JUMPDEST DUP1 PUSH1 0x40 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH3 0x4BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x4D8 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x4BE JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x4FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 PUSH1 0x1F DUP7 ADD SLT PUSH3 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x514 PUSH3 0x456 JUMP JUMPDEST DUP1 PUSH1 0x40 DUP8 ADD DUP9 DUP2 GT ISZERO PUSH3 0x527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x55A JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x54B JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x529 JUMP JUMPDEST POP DUP2 SWAP7 POP PUSH3 0x56A DUP10 DUP3 PUSH3 0x48D JUMP JUMPDEST PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xA0 SWAP1 SWAP10 ADD MLOAD SWAP8 SWAP11 SWAP1 SWAP10 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x5C4 JUMPI PUSH3 0x5C4 PUSH3 0x599 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x5F3 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0x5D5 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x606 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x42E PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x5CB JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH3 0x645 PUSH1 0x80 DUP4 ADD DUP8 PUSH3 0x5CB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x677 JUMPI PUSH3 0x677 PUSH3 0x599 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH2 0x1821 DUP1 PUSH3 0x68C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x8A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4209FFF1 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x4209FFF1 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x8622A689 EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0xA0FF4999 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0xAFFED0E0 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0xF3F480D9 EQ PUSH2 0x210 JUMPI PUSH2 0xB4 JUMP JUMPDEST DUP1 PUSH4 0x21E66868 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x365B98B2 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x17F JUMPI PUSH2 0xB4 JUMP JUMPDEST CALLDATASIZE PUSH2 0xB4 JUMPI PUSH2 0xB2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3B DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1681 PUSH1 0x3B SWAP2 CODECOPY CALLVALUE CALLER PUSH2 0x226 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3C DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15BB PUSH1 0x3C SWAP2 CODECOPY CALLVALUE CALLER PUSH2 0x226 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1231 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH2 0x127 CALLDATASIZE PUSH1 0x4 PUSH2 0x12ED JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x1308 JUMP JUMPDEST PUSH2 0x53B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB2 PUSH2 0x55B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x12ED JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB2 PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1321 JUMP JUMPDEST PUSH2 0x70B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x26D DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x23E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13C6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xE3849F79 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xBBD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x295 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1656 PUSH1 0x2B SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST PUSH2 0x2C2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH11 0x1B9BDB98D9481A5CC80959 PUSH1 0xAA SHL DUP2 MSTORE POP DUP4 PUSH2 0xBDE JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x52C JUMPI PUSH2 0x319 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH18 0x5F7369676E6572735B25645D206973202573 PUSH1 0x70 SHL DUP2 MSTORE POP DUP3 DUP8 DUP5 PUSH1 0x2 DUP2 LT PUSH2 0x30F JUMPI PUSH2 0x30F PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x226 JUMP JUMPDEST PUSH2 0x365 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH19 0x5F62616C616E6365735B25645D206973202573 PUSH1 0x68 SHL DUP2 MSTORE POP DUP3 DUP7 DUP5 PUSH1 0x2 DUP2 LT PUSH2 0x35B JUMPI PUSH2 0x35B PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xC27 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43A DUP9 DUP4 PUSH1 0x2 DUP2 LT PUSH2 0x37C JUMPI PUSH2 0x37C PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x434 DUP10 DUP9 DUP7 PUSH1 0x2 DUP2 LT PUSH2 0x397 JUMPI PUSH2 0x397 PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP4 MSTORE PUSH1 0x14 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x54 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP5 DUP4 ADD MSTORE PUSH1 0x3C DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x5C SWAP1 SWAP4 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC6E JUMP JUMPDEST SWAP1 POP PUSH2 0x46B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x6465636F646564206973202573 PUSH1 0x98 SHL DUP2 MSTORE POP DUP3 PUSH2 0xC92 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA DUP10 DUP5 PUSH1 0x2 DUP2 LT PUSH2 0x482 JUMPI PUSH2 0x482 PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x434 DUP11 DUP10 DUP8 PUSH1 0x2 DUP2 LT PUSH2 0x49D JUMPI PUSH2 0x49D PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP4 MSTORE PUSH1 0x14 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x54 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 DUP5 PUSH1 0x2 DUP2 LT PUSH2 0x4F5 JUMPI PUSH2 0x4F5 PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP DUP1 PUSH2 0x517 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x532 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 0x524 SWAP1 PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C5 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 LT PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x57C PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1629 PUSH1 0x2D SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x2737BA103AB9B2B9 PUSH1 0xC1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5EC PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16E7 PUSH1 0x2D SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP3 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x641 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x646 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x68E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0x6B1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x43 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1714 PUSH1 0x43 SWAP2 CODECOPY CALLER DUP5 PUSH2 0xCD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH2 0x709 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1757 PUSH1 0x2D SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x72C PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1629 PUSH1 0x2D SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x776 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8 PUSH1 0x24 DUP3 ADD MSTORE PUSH8 0x2737BA103AB9B2B9 PUSH1 0xC1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5C2 JUMP JUMPDEST DUP1 DUP4 DUP4 PUSH2 0x79A PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x34 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17B8 PUSH1 0x34 SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST PUSH2 0x7A2 PUSH2 0x1068 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x803 JUMPI PUSH1 0x0 DUP2 PUSH1 0x2 DUP2 LT PUSH2 0x7C1 JUMPI PUSH2 0x7C1 PUSH2 0x13F9 JUMP JUMPDEST ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 PUSH1 0x2 DUP2 LT PUSH2 0x7DE JUMPI PUSH2 0x7DE PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 SWAP1 SWAP3 MUL ADD MSTORE DUP1 PUSH2 0x7FB DUP2 PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7A5 JUMP JUMPDEST POP PUSH2 0x811 DUP5 ADDRESS DUP4 DUP7 DUP7 PUSH2 0x272 JUMP JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x496E76616C6964207369676E6174757265 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5C2 JUMP JUMPDEST DUP7 PUSH2 0x873 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15F7 PUSH1 0x32 SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST PUSH2 0x89E PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3B DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x154E PUSH1 0x3B SWAP2 CODECOPY DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SELFBALANCE SWAP2 SWAP1 PUSH2 0xB5B JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD PUSH2 0x8AE SWAP2 PUSH2 0xBAA JUMP JUMPDEST SELFBALANCE LT ISZERO PUSH2 0x923 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x62616C616E6365206F6620636F6E7472616374206D757374206265203E3D2074 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F2074686520746F74616C2062616C616E6365206F6620757365727300000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0x944 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2B DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16BC PUSH1 0x2B SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT PUSH2 0x995 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45787069726564206368616C6C656E676520706572696F640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP8 GT PUSH2 0x9FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F6E6365206D7573742062652067726561746572207468616E207468652063 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x757272656E74206E6F6E6365 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0xA62 JUMPI DUP9 DUP2 PUSH1 0x2 DUP2 LT PUSH2 0xA19 JUMPI PUSH2 0xA19 PUSH2 0x13F9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x3 PUSH1 0x0 DUP1 DUP5 PUSH1 0x2 DUP2 LT PUSH2 0xA34 JUMPI PUSH2 0xA34 PUSH2 0x13F9 JUMP JUMPDEST ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE DUP1 PUSH2 0xA5A DUP2 PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9FE JUMP JUMPDEST POP PUSH1 0x6 DUP8 SWAP1 SSTORE PUSH1 0x4 SLOAD PUSH2 0xA76 SWAP1 TIMESTAMP SWAP1 PUSH2 0xBAA JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x5050C6E2A6FC173775CE4852F893C9E5AAEFF00101F3AEF75E0EC263CF083CA9 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xAD2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1589 PUSH1 0x32 SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST POP PUSH2 0xAF4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x34 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1784 PUSH1 0x34 SWAP2 CODECOPY PUSH2 0xB15 JUMP JUMPDEST POP POP POP POP PUSH2 0x26D PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1757 PUSH1 0x2D SWAP2 CODECOPY JUMPDEST PUSH2 0xB58 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB29 SWAP2 SWAP1 PUSH2 0x143E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0xBBD JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xBA4 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB75 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1451 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x4772B33 PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH2 0xBBD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB6 DUP3 DUP5 PUSH2 0x1480 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC23 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xBF4 SWAP3 SWAP2 SWAP1 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x9710A9D PUSH1 0xE4 SHL OR SWAP1 MSTORE PUSH2 0xBBD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x26D DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xC3F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x14BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x969CDD03 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xBBD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xC7D DUP6 DUP6 PUSH2 0xD1E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xC8A DUP2 PUSH2 0xD8C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xC23 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xCA8 SWAP3 SWAP2 SWAP1 PUSH2 0x14DF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x319AF333 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xBBD JUMP JUMPDEST PUSH2 0x26D DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xCEF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1509 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x7C81217 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xBBD JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0xD54 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0xD48 DUP8 DUP3 DUP6 DUP6 PUSH2 0xF42 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xD85 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 SUB PUSH2 0xD7D JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0xD72 DUP7 DUP4 DUP4 PUSH2 0x102F JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0xD85 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xDA0 JUMPI PUSH2 0xDA0 PUSH2 0x1537 JUMP JUMPDEST SUB PUSH2 0xDA8 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xDBC JUMPI PUSH2 0xDBC PUSH2 0x1537 JUMP JUMPDEST SUB PUSH2 0xE09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xE1D JUMPI PUSH2 0xE1D PUSH2 0x1537 JUMP JUMPDEST SUB PUSH2 0xE6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xE7E JUMPI PUSH2 0xE7E PUSH2 0x1537 JUMP JUMPDEST SUB PUSH2 0xED6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xEEA JUMPI PUSH2 0xEEA PUSH2 0x1537 JUMP JUMPDEST SUB PUSH2 0xB58 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0xF79 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1026 JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0xF91 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0xFA2 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x1026 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFF6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x101F JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1026 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 AND DUP2 PUSH2 0x104C PUSH1 0xFF DUP7 SWAP1 SHR PUSH1 0x1B PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP PUSH2 0x105A DUP8 DUP3 DUP9 DUP6 PUSH2 0xF42 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x10BF JUMPI PUSH2 0x10BF PUSH2 0x1086 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x10EE JUMPI PUSH2 0x10EE PUSH2 0x1086 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 DUP2 DUP5 ADD SLT PUSH2 0x1108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1110 PUSH2 0x109C JUMP JUMPDEST DUP1 PUSH1 0x40 DUP6 ADD DUP7 DUP2 GT ISZERO PUSH2 0x1122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x11B9 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1145 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 DUP8 DUP4 ADD SLT PUSH2 0x1159 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x116D JUMPI PUSH2 0x116D PUSH2 0x1086 JUMP JUMPDEST PUSH2 0x117E DUP3 DUP11 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH2 0x10C5 JUMP JUMPDEST SWAP3 POP DUP2 DUP4 MSTORE DUP12 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1195 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP2 DUP2 DUP6 ADD DUP3 DUP6 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP4 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP7 MSTORE SWAP5 SWAP1 SWAP5 ADD SWAP4 POP PUSH1 0x20 ADD PUSH2 0x1124 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x11DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11FA PUSH2 0x109C JUMP JUMPDEST DUP1 PUSH1 0x40 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH2 0x120C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1226 JUMPI DUP1 CALLDATALOAD DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x120E JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x126C DUP9 DUP3 DUP10 ADD PUSH2 0x10F6 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x127C DUP2 DUP9 ADD PUSH2 0x11C5 JUMP JUMPDEST SWAP5 POP DUP8 PUSH1 0x5F DUP9 ADD SLT PUSH2 0x128D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1295 PUSH2 0x109C JUMP JUMPDEST DUP1 PUSH1 0x80 DUP10 ADD DUP11 DUP2 GT ISZERO PUSH2 0x12A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP11 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12CA JUMPI PUSH2 0x12BD DUP2 PUSH2 0x11C5 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 DUP5 ADD PUSH2 0x12AC JUMP JUMPDEST POP DUP2 SWAP7 POP PUSH2 0x12D8 DUP12 DUP3 PUSH2 0x11E1 JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP6 SWAP9 PUSH1 0xC0 ADD CALLDATALOAD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB6 DUP3 PUSH2 0x11C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x131A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1340 DUP6 DUP6 PUSH2 0x11E1 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x136F DUP7 DUP3 DUP8 ADD PUSH2 0x10F6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x139F JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1383 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x13B1 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x13D9 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1379 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1437 JUMPI PUSH2 0x1437 PUSH2 0x140F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBB6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1379 JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1464 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x1379 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1493 JUMPI PUSH2 0x1493 PUSH2 0x140F JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x14AB PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1379 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x14CD PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1379 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x40 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x14F2 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1379 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x151C PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1379 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH4 0x6F6E7472 PUSH2 0x6374 KECCAK256 PUSH3 0x616C61 PUSH15 0x63652069732025642C2062616C616E PUSH4 0x65735B30 0x5D KECCAK256 PUSH10 0x732025642C62616C616E PUSH4 0x65735B31 0x5D KECCAK256 PUSH10 0x73202564426944697265 PUSH4 0x74696F6E PUSH2 0x6C50 PUSH2 0x796D PUSH6 0x6E744368616E PUSH15 0x656C2E636865636B42616C616E6365 PUSH20 0x2829207061737365644269446972656374696F6E PUSH2 0x6C50 PUSH2 0x796D PUSH6 0x6E744368616E PUSH15 0x656C2E66616C6C6261636B28292C20 MSTORE PUSH6 0x63656976696E PUSH8 0x2025642066726F6D KECCAK256 0x25 PUSH20 0x4269446972656374696F6E616C5061796D656E74 NUMBER PUSH9 0x616E6E656C2E636865 PUSH4 0x6B42616C PUSH2 0x6E63 PUSH6 0x732829206361 PUSH13 0x6C65644269446972656374696F PUSH15 0x616C5061796D656E744368616E6E65 PUSH13 0x2E6F6E6C795573657228292063 PUSH2 0x6C6C PUSH6 0x644269446972 PUSH6 0x6374696F6E61 PUSH13 0x5061796D656E744368616E6E65 PUSH13 0x2E76657269667928292063616C PUSH13 0x65644269446972656374696F6E PUSH2 0x6C50 PUSH2 0x796D PUSH6 0x6E744368616E PUSH15 0x656C2E7265636569766528292C2052 PUSH6 0x63656976696E PUSH8 0x2025642066726F6D KECCAK256 0x25 PUSH20 0x4269446972656374696F6E616C5061796D656E74 NUMBER PUSH9 0x616E6E656C2E636861 PUSH13 0x6C656E67654578697428294269 DIFFICULTY PUSH10 0x72656374696F6E616C50 PUSH2 0x796D PUSH6 0x6E744368616E PUSH15 0x656C2E776974686472617728292063 PUSH2 0x6C6C PUSH6 0x644269446972 PUSH6 0x6374696F6E61 PUSH13 0x5061796D656E744368616E6E65 PUSH13 0x2E776974686472617728292C20 PUSH14 0x73672E73656E6465722069732025 PUSH20 0x2C20616D6F756E743D2564426944697265637469 PUSH16 0x6E616C5061796D656E744368616E6E65 PUSH13 0x2E6F6E6C795573657228292070 PUSH2 0x7373 PUSH6 0x644269446972 PUSH6 0x6374696F6E61 PUSH13 0x5061796D656E744368616E6E65 PUSH13 0x2E636865636B5369676E617475 PUSH19 0x65732829207061737365644269446972656374 PUSH10 0x6F6E616C5061796D656E PUSH21 0x4368616E6E656C2E636865636B5369676E61747572 PUSH6 0x732829206361 PUSH13 0x6C6564A2646970667358221220 PUSH7 0x1D6F2D91CD38A2 CALLDATALOAD 0x2E 0x4A 0xB1 0xC 0xEC STATICCALL SHR 0xA6 0x23 CHAINID LT 0x22 SWAP6 0x2E PUSH26 0x75FCB9B7E70164864736F6C634300080E003342694469726563 PUSH21 0x696F6E616C5061796D656E744368616E6E656C2E63 PUSH16 0x6E7374727563746F722829636F6E7472 PUSH2 0x6374 KECCAK256 PUSH3 0x616C61 PUSH15 0x63652069732025642C2062616C616E PUSH4 0x65735B30 0x5D KECCAK256 PUSH10 0x732025642C62616C616E PUSH4 0x65735B31 0x5D KECCAK256 PUSH10 0x73202564426944697265 PUSH4 0x74696F6E PUSH2 0x6C50 PUSH2 0x796D PUSH6 0x6E744368616E PUSH15 0x656C2E636865636B42616C616E6365 PUSH20 0x2829207061737365644269446972656374696F6E PUSH2 0x6C50 PUSH2 0x796D PUSH6 0x6E744368616E PUSH15 0x656C2E636865636B42616C616E6365 PUSH20 0x28292063616C6C65645072656469637442504341 PUSH5 0x6472657373 0x2E PUSH7 0x616C6C6261636B 0x28 0x29 KECCAK256 PUSH4 0x616C6C65 PUSH5 0x5072656469 PUSH4 0x74425043 COINBASE PUSH5 0x6472657373 0x2E PUSH19 0x65636569766528292C20726563656976696E67 KECCAK256 0x25 PUSH5 0x2066726F6D KECCAK256 0x25 PUSH20 0x50726564696374425043416464726573732E6465 PUSH17 0x6C6F7928292063616C6C65645072656469 PUSH4 0x74425043 COINBASE PUSH5 0x6472657373 0x2E PUSH17 0x72656469637428292063616C6C65645072 PUSH6 0x646963744250 NUMBER COINBASE PUSH5 0x6472657373 0x2E PUSH17 0x7265646963742829207061737365645072 PUSH6 0x646963744250 NUMBER COINBASE PUSH5 0x6472657373 0x2E PUSH8 0x6574456E636F6465 PUSH5 0x43616C6C44 PUSH2 0x7461 0x28 0x29 KECCAK256 PUSH4 0x616C6C65 PUSH5 0xA264697066 PUSH20 0x582212208D3D883340AA6B182372D84B8DED692E PUSH5 0x9BBEBD8D1E CODECOPY 0xAF PUSH16 0xC7CBF88AED0F6C64736F6C634300080E STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        119,
        4843
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "5": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "8": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "LT",
      "path": "6"
    },
    "9": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x3D"
    },
    "13": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "14": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "16": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "CALLDATALOAD",
      "path": "6"
    },
    "17": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xE0"
    },
    "19": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "SHR",
      "path": "6"
    },
    "20": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "DUP1",
      "path": "6"
    },
    "21": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0x2801067D"
    },
    "26": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "EQ",
      "path": "6"
    },
    "27": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x8F"
    },
    "31": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "32": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "DUP1",
      "path": "6"
    },
    "33": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0xD0C7BBF3"
    },
    "38": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "EQ",
      "path": "6"
    },
    "39": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0xD1"
    },
    "43": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "44": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "DUP1",
      "path": "6"
    },
    "45": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH4",
      "path": "6",
      "value": "0xD41C72D2"
    },
    "50": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "EQ",
      "path": "6"
    },
    "51": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0xE8"
    },
    "55": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "56": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x6B"
    },
    "60": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "JUMP",
      "path": "6"
    },
    "61": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "62": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "63": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x6B"
    },
    "67": {
      "fn": null,
      "offset": [
        119,
        4843
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "68": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 0,
      "value": "0x69"
    },
    "72": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "74": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "75": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "DUP1",
      "path": "6"
    },
    "76": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "78": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "ADD",
      "path": "6"
    },
    "79": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "81": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "82": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "DUP1",
      "path": "6"
    },
    "83": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x31"
    },
    "85": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "DUP2",
      "path": "6"
    },
    "86": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "87": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "89": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "ADD",
      "path": "6"
    },
    "90": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x2823"
    },
    "94": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x31"
    },
    "96": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "97": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "CODECOPY",
      "path": "6"
    },
    "98": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        369,
        378
      ],
      "op": "CALLVALUE",
      "path": "6"
    },
    "99": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        392,
        402
      ],
      "op": "CALLER",
      "path": "6"
    },
    "100": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        290
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x11C"
    },
    "104": {
      "fn": "PredictBPCAddress.<receive>",
      "jump": "i",
      "offset": [
        279,
        412
      ],
      "op": "JUMP",
      "path": "6"
    },
    "105": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        279,
        412
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "106": {
      "offset": [
        119,
        4843
      ],
      "op": "STOP",
      "path": "6"
    },
    "107": {
      "fn": "PredictBPCAddress.<receive>",
      "offset": [
        119,
        4843
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "108": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 1,
      "value": "0x69"
    },
    "112": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "114": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "115": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "DUP1",
      "path": "6"
    },
    "116": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "118": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "ADD",
      "path": "6"
    },
    "119": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "121": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "122": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "DUP1",
      "path": "6"
    },
    "123": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x23"
    },
    "125": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "DUP2",
      "path": "6"
    },
    "126": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "127": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "129": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "ADD",
      "path": "6"
    },
    "130": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x2800"
    },
    "134": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x23"
    },
    "136": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "137": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        854
      ],
      "op": "CODECOPY",
      "path": "6"
    },
    "138": {
      "fn": "PredictBPCAddress.<fallback>",
      "offset": [
        804,
        815
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x16C"
    },
    "142": {
      "fn": "PredictBPCAddress.<fallback>",
      "jump": "i",
      "offset": [
        804,
        854
      ],
      "op": "JUMP",
      "path": "6"
    },
    "143": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "144": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "CALLVALUE",
      "path": "6"
    },
    "145": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "DUP1",
      "path": "6"
    },
    "146": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "147": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x9C"
    },
    "151": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "152": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "154": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "DUP1",
      "path": "6"
    },
    "155": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "REVERT",
      "path": "6"
    },
    "156": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "157": {
      "op": "POP"
    },
    "158": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0xB4"
    },
    "162": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0xAE"
    },
    "166": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "167": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "169": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x5AA"
    },
    "173": {
      "fn": "PredictBPCAddress.predict",
      "jump": "i",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMP",
      "path": "6"
    },
    "174": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "175": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x1B6"
    },
    "179": {
      "fn": "PredictBPCAddress.predict",
      "jump": "i",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMP",
      "path": "6"
    },
    "180": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "181": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "183": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "184": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "186": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "188": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "190": {
      "op": "SHL"
    },
    "191": {
      "op": "SUB"
    },
    "192": {
      "op": "SWAP1"
    },
    "193": {
      "op": "SWAP2"
    },
    "194": {
      "op": "AND"
    },
    "195": {
      "op": "DUP2"
    },
    "196": {
      "op": "MSTORE"
    },
    "197": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "199": {
      "op": "ADD"
    },
    "200": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "201": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "203": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "204": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "DUP1",
      "path": "6"
    },
    "205": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "206": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "SUB",
      "path": "6"
    },
    "207": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "208": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "RETURN",
      "path": "6"
    },
    "209": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "210": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0xB4"
    },
    "214": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0xE2"
    },
    "218": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "219": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "221": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x5AA"
    },
    "225": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        2333,
        3306
      ],
      "op": "JUMP",
      "path": "6"
    },
    "226": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "227": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x2CB"
    },
    "231": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        2333,
        3306
      ],
      "op": "JUMP",
      "path": "6"
    },
    "232": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "233": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "CALLVALUE",
      "path": "6"
    },
    "234": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "DUP1",
      "path": "6"
    },
    "235": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "236": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0xF5"
    },
    "240": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "241": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "243": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "DUP1",
      "path": "6"
    },
    "244": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "REVERT",
      "path": "6"
    },
    "245": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "246": {
      "op": "POP"
    },
    "247": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x10D"
    },
    "251": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x107"
    },
    "255": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "256": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "258": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x5AA"
    },
    "262": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "jump": "i",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMP",
      "path": "6"
    },
    "263": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "264": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x3DF"
    },
    "268": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "jump": "i",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMP",
      "path": "6"
    },
    "269": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "270": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "272": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "273": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0xC8"
    },
    "277": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "278": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "279": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x6C2"
    },
    "283": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "jump": "i",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMP",
      "path": "6"
    },
    "284": {
      "fn": "console.log",
      "offset": [
        10310,
        10464
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "285": {
      "fn": "console.log",
      "offset": [
        10380,
        10460
      ],
      "op": "PUSH3",
      "path": "10",
      "statement": 2,
      "value": "0x167"
    },
    "289": {
      "fn": "console.log",
      "offset": [
        10448,
        10450
      ],
      "op": "DUP4",
      "path": "10"
    },
    "290": {
      "fn": "console.log",
      "offset": [
        10452,
        10454
      ],
      "op": "DUP4",
      "path": "10"
    },
    "291": {
      "fn": "console.log",
      "offset": [
        10456,
        10458
      ],
      "op": "DUP4",
      "path": "10"
    },
    "292": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "294": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "295": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "297": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "ADD",
      "path": "10"
    },
    "298": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x137"
    },
    "302": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "303": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "304": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "305": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "306": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x6DE"
    },
    "310": {
      "fn": "console.log",
      "jump": "i",
      "offset": [
        10396,
        10459
      ],
      "op": "JUMP",
      "path": "10"
    },
    "311": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "312": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "314": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "DUP1",
      "path": "10"
    },
    "315": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "316": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "318": {
      "op": "NOT"
    },
    "319": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "DUP2",
      "path": "10"
    },
    "320": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "DUP5",
      "path": "10"
    },
    "321": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "SUB",
      "path": "10"
    },
    "322": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "ADD",
      "path": "10"
    },
    "323": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "DUP2",
      "path": "10"
    },
    "324": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "325": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "326": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "327": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "328": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "330": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "DUP2",
      "path": "10"
    },
    "331": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "ADD",
      "path": "10"
    },
    "332": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "DUP1",
      "path": "10"
    },
    "333": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "334": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "336": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "338": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "340": {
      "op": "SHL"
    },
    "341": {
      "op": "SUB"
    },
    "342": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "AND",
      "path": "10"
    },
    "343": {
      "op": "PUSH4",
      "value": "0xE3849F79"
    },
    "348": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "350": {
      "op": "SHL"
    },
    "351": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "OR",
      "path": "10"
    },
    "352": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "353": {
      "fn": "console.log",
      "offset": [
        10396,
        10459
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "354": {
      "fn": "console.log",
      "offset": [
        10380,
        10395
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x458"
    },
    "358": {
      "fn": "console.log",
      "jump": "i",
      "offset": [
        10380,
        10460
      ],
      "op": "JUMP",
      "path": "10"
    },
    "359": {
      "fn": "console.log",
      "offset": [
        10380,
        10460
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "360": {
      "fn": "console.log",
      "offset": [
        10310,
        10464
      ],
      "op": "POP",
      "path": "10"
    },
    "361": {
      "fn": "console.log",
      "offset": [
        10310,
        10464
      ],
      "op": "POP",
      "path": "10"
    },
    "362": {
      "fn": "console.log",
      "offset": [
        10310,
        10464
      ],
      "op": "POP",
      "path": "10"
    },
    "363": {
      "fn": "console.log",
      "jump": "o",
      "offset": [
        10310,
        10464
      ],
      "op": "JUMP",
      "path": "10"
    },
    "364": {
      "fn": "console.log",
      "offset": [
        5053,
        5165
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "365": {
      "fn": "console.log",
      "offset": [
        5102,
        5161
      ],
      "op": "PUSH3",
      "path": "10",
      "statement": 3,
      "value": "0x1B3"
    },
    "369": {
      "fn": "console.log",
      "offset": [
        5157,
        5159
      ],
      "op": "DUP2",
      "path": "10"
    },
    "370": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "372": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "373": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "375": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "ADD",
      "path": "10"
    },
    "376": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x183"
    },
    "380": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "381": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "382": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x6C2"
    },
    "386": {
      "fn": "console.log",
      "jump": "i",
      "offset": [
        5118,
        5160
      ],
      "op": "JUMP",
      "path": "10"
    },
    "387": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "388": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "390": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "DUP1",
      "path": "10"
    },
    "391": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "392": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "394": {
      "op": "NOT"
    },
    "395": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "DUP2",
      "path": "10"
    },
    "396": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "DUP5",
      "path": "10"
    },
    "397": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "SUB",
      "path": "10"
    },
    "398": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "ADD",
      "path": "10"
    },
    "399": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "DUP2",
      "path": "10"
    },
    "400": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "401": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "402": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "403": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "404": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "406": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "DUP2",
      "path": "10"
    },
    "407": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "ADD",
      "path": "10"
    },
    "408": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "DUP1",
      "path": "10"
    },
    "409": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "410": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "412": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "414": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "416": {
      "op": "SHL"
    },
    "417": {
      "op": "SUB"
    },
    "418": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "AND",
      "path": "10"
    },
    "419": {
      "op": "PUSH4",
      "value": "0x104C13EB"
    },
    "424": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "426": {
      "op": "SHL"
    },
    "427": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "OR",
      "path": "10"
    },
    "428": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "429": {
      "fn": "console.log",
      "offset": [
        5118,
        5160
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "430": {
      "fn": "console.log",
      "offset": [
        5102,
        5117
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x458"
    },
    "434": {
      "fn": "console.log",
      "jump": "i",
      "offset": [
        5102,
        5161
      ],
      "op": "JUMP",
      "path": "10"
    },
    "435": {
      "fn": "console.log",
      "offset": [
        5102,
        5161
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "436": {
      "fn": "console.log",
      "offset": [
        5053,
        5165
      ],
      "op": "POP",
      "path": "10"
    },
    "437": {
      "fn": "console.log",
      "jump": "o",
      "offset": [
        5053,
        5165
      ],
      "op": "JUMP",
      "path": "10"
    },
    "438": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "439": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3539,
        3546
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "441": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 4,
      "value": "0x1DC"
    },
    "445": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "447": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "448": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP1",
      "path": "6"
    },
    "449": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "451": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "ADD",
      "path": "6"
    },
    "452": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "454": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "455": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP1",
      "path": "6"
    },
    "456": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x22"
    },
    "458": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP2",
      "path": "6"
    },
    "459": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "460": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "462": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "ADD",
      "path": "6"
    },
    "463": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x2875"
    },
    "467": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x22"
    },
    "469": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "470": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "CODECOPY",
      "path": "6"
    },
    "471": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3569
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x16C"
    },
    "475": {
      "fn": "PredictBPCAddress.predict",
      "jump": "i",
      "offset": [
        3558,
        3607
      ],
      "op": "JUMP",
      "path": "6"
    },
    "476": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3558,
        3607
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "477": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3816,
        3840
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "479": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4006,
        4010
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xFF"
    },
    "481": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3999,
        4011
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xF8"
    },
    "483": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3999,
        4011
      ],
      "op": "SHL",
      "path": "6"
    },
    "484": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4049,
        4053
      ],
      "op": "ADDRESS",
      "path": "6"
    },
    "485": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4084,
        4089
      ],
      "op": "DUP10",
      "path": "6"
    },
    "486": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "488": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "489": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "DUP1",
      "path": "6"
    },
    "490": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "492": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "ADD",
      "path": "6"
    },
    "493": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x1F7"
    },
    "497": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "498": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x50E"
    },
    "502": {
      "fn": "PredictBPCAddress.predict",
      "jump": "i",
      "offset": [
        4216,
        4303
      ],
      "op": "JUMP",
      "path": "6"
    },
    "503": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "504": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "506": {
      "op": "NOT"
    },
    "507": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "DUP3",
      "path": "6"
    },
    "508": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "DUP3",
      "path": "6"
    },
    "509": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "SUB",
      "path": "6"
    },
    "510": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "DUP2",
      "path": "6"
    },
    "511": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "ADD",
      "path": "6"
    },
    "512": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "DUP4",
      "path": "6"
    },
    "513": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "514": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x1F"
    },
    "516": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "517": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "518": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "ADD",
      "path": "6"
    },
    "519": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "AND",
      "path": "6"
    },
    "520": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "522": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "DUP2",
      "path": "6"
    },
    "523": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "524": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "525": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x223"
    },
    "529": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "530": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "531": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4341,
        4347
      ],
      "op": "DUP12",
      "path": "6"
    },
    "532": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4341,
        4347
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "533": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4385,
        4394
      ],
      "op": "DUP12",
      "path": "6"
    },
    "534": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4385,
        4394
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "535": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4432,
        4442
      ],
      "op": "DUP12",
      "path": "6"
    },
    "536": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4432,
        4442
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "537": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4480,
        4496
      ],
      "op": "DUP12",
      "path": "6"
    },
    "538": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4480,
        4496
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "539": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4216,
        4303
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "541": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "ADD",
      "path": "6"
    },
    "542": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x713"
    },
    "546": {
      "fn": "PredictBPCAddress.predict",
      "jump": "i",
      "offset": [
        4162,
        4530
      ],
      "op": "JUMP",
      "path": "6"
    },
    "547": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "548": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "550": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "551": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "553": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "DUP2",
      "path": "6"
    },
    "554": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "DUP4",
      "path": "6"
    },
    "555": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "SUB",
      "path": "6"
    },
    "556": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "SUB",
      "path": "6"
    },
    "557": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "DUP2",
      "path": "6"
    },
    "558": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "559": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "560": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "562": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4162,
        4530
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "563": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4119,
        4560
      ],
      "op": "DUP1",
      "path": "6"
    },
    "564": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4119,
        4560
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "565": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4119,
        4560
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "566": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4119,
        4560
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "568": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4119,
        4560
      ],
      "op": "ADD",
      "path": "6"
    },
    "569": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4119,
        4560
      ],
      "op": "KECCAK256",
      "path": "6"
    },
    "570": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "572": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "573": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "575": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "ADD",
      "path": "6"
    },
    "576": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x281"
    },
    "580": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "SWAP5",
      "path": "6"
    },
    "581": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "SWAP4",
      "path": "6"
    },
    "582": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "583": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "584": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "585": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "587": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "589": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "591": {
      "op": "SHL"
    },
    "592": {
      "op": "SUB"
    },
    "593": {
      "op": "NOT"
    },
    "594": {
      "op": "SWAP5"
    },
    "595": {
      "op": "SWAP1"
    },
    "596": {
      "op": "SWAP5"
    },
    "597": {
      "op": "AND"
    },
    "598": {
      "op": "DUP5"
    },
    "599": {
      "op": "MSTORE"
    },
    "600": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "602": {
      "op": "SWAP3"
    },
    "603": {
      "op": "SWAP1"
    },
    "604": {
      "op": "SWAP3"
    },
    "605": {
      "op": "SHL"
    },
    "606": {
      "op": "PUSH12",
      "value": "0xFFFFFFFFFFFFFFFFFFFFFFFF"
    },
    "619": {
      "op": "NOT"
    },
    "620": {
      "op": "AND"
    },
    "621": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "623": {
      "op": "DUP5"
    },
    "624": {
      "op": "ADD"
    },
    "625": {
      "op": "MSTORE"
    },
    "626": {
      "op": "PUSH1",
      "value": "0x15"
    },
    "628": {
      "op": "DUP4"
    },
    "629": {
      "op": "ADD"
    },
    "630": {
      "op": "MSTORE"
    },
    "631": {
      "op": "PUSH1",
      "value": "0x35"
    },
    "633": {
      "op": "DUP3"
    },
    "634": {
      "op": "ADD"
    },
    "635": {
      "op": "MSTORE"
    },
    "636": {
      "op": "PUSH1",
      "value": "0x55"
    },
    "638": {
      "op": "ADD"
    },
    "639": {
      "op": "SWAP1"
    },
    "640": {
      "op": "JUMP"
    },
    "641": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "642": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "644": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "645": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "647": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "DUP2",
      "path": "6"
    },
    "648": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "DUP4",
      "path": "6"
    },
    "649": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "SUB",
      "path": "6"
    },
    "650": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "SUB",
      "path": "6"
    },
    "651": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "DUP2",
      "path": "6"
    },
    "652": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "653": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "654": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "656": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3953,
        4586
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "657": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3918,
        4608
      ],
      "op": "DUP1",
      "path": "6"
    },
    "658": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3918,
        4608
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "659": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3918,
        4608
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "660": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3918,
        4608
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "662": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3918,
        4608
      ],
      "op": "ADD",
      "path": "6"
    },
    "663": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3918,
        4608
      ],
      "op": "KECCAK256",
      "path": "6"
    },
    "664": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3889,
        4626
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "666": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3889,
        4626
      ],
      "op": "SHR",
      "path": "6"
    },
    "667": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3816,
        4650
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "668": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3816,
        4650
      ],
      "op": "POP",
      "path": "6"
    },
    "669": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 5,
      "value": "0x2C0"
    },
    "673": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "675": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "676": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "DUP1",
      "path": "6"
    },
    "677": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "679": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "ADD",
      "path": "6"
    },
    "680": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "682": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "683": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "DUP1",
      "path": "6"
    },
    "684": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x22"
    },
    "686": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "DUP2",
      "path": "6"
    },
    "687": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "688": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "690": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "ADD",
      "path": "6"
    },
    "691": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x2897"
    },
    "695": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x22"
    },
    "697": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "698": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "CODECOPY",
      "path": "6"
    },
    "699": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4763
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x16C"
    },
    "703": {
      "fn": "PredictBPCAddress.predict",
      "jump": "i",
      "offset": [
        4752,
        4801
      ],
      "op": "JUMP",
      "path": "6"
    },
    "704": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4752,
        4801
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "705": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        4818,
        4834
      ],
      "op": "SWAP8",
      "path": "6",
      "statement": 6
    },
    "706": {
      "fn": "PredictBPCAddress.predict",
      "offset": [
        3312,
        4841
      ],
      "op": "SWAP7",
      "path": "6"
    },
    "707": {
      "op": "POP"
    },
    "708": {
      "op": "POP"
    },
    "709": {
      "op": "POP"
    },
    "710": {
      "op": "POP"
    },
    "711": {
      "op": "POP"
    },
    "712": {
      "op": "POP"
    },
    "713": {
      "op": "POP"
    },
    "714": {
      "fn": "PredictBPCAddress.predict",
      "jump": "o",
      "offset": [
        3312,
        4841
      ],
      "op": "JUMP",
      "path": "6"
    },
    "715": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "716": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2567,
        2574
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "718": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 7,
      "value": "0x2F1"
    },
    "722": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "724": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "725": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "DUP1",
      "path": "6"
    },
    "726": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "728": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "ADD",
      "path": "6"
    },
    "729": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "731": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "732": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "DUP1",
      "path": "6"
    },
    "733": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x21"
    },
    "735": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "DUP2",
      "path": "6"
    },
    "736": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "737": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "739": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "ADD",
      "path": "6"
    },
    "740": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x2854"
    },
    "744": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x21"
    },
    "746": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "747": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "CODECOPY",
      "path": "6"
    },
    "748": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2597
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x16C"
    },
    "752": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        2586,
        2634
      ],
      "op": "JUMP",
      "path": "6"
    },
    "753": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2586,
        2634
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "754": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 8,
      "value": "0x32B"
    },
    "758": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "760": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "761": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "DUP1",
      "path": "6"
    },
    "762": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "764": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "ADD",
      "path": "6"
    },
    "765": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "767": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "768": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "DUP1",
      "path": "6"
    },
    "769": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x16"
    },
    "771": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "DUP2",
      "path": "6"
    },
    "772": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "773": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "775": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "ADD",
      "path": "6"
    },
    "776": {
      "op": "PUSH22",
      "value": "0x18DBDB9D1C9858DD0818985B185B98D9481A5CC80959"
    },
    "799": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "801": {
      "op": "SHL"
    },
    "802": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "DUP2",
      "path": "6"
    },
    "803": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "804": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "POP",
      "path": "6"
    },
    "805": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2682,
        2703
      ],
      "op": "SELFBALANCE",
      "path": "6"
    },
    "806": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2655
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x479"
    },
    "810": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        2644,
        2704
      ],
      "op": "JUMP",
      "path": "6"
    },
    "811": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2644,
        2704
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "812": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 9,
      "value": "0x355"
    },
    "816": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "818": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "819": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "DUP1",
      "path": "6"
    },
    "820": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "822": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "ADD",
      "path": "6"
    },
    "823": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "825": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "826": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "DUP1",
      "path": "6"
    },
    "827": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x7"
    },
    "829": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "DUP2",
      "path": "6"
    },
    "830": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "831": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "833": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "ADD",
      "path": "6"
    },
    "834": {
      "op": "PUSH7",
      "value": "0x53616C74206973"
    },
    "842": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "844": {
      "op": "SHL"
    },
    "845": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "DUP2",
      "path": "6"
    },
    "846": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "847": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "POP",
      "path": "6"
    },
    "848": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2935
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x16C"
    },
    "852": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        2924,
        2946
      ],
      "op": "JUMP",
      "path": "6"
    },
    "853": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2924,
        2946
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "854": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2956,
        2981
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 10,
      "value": "0x360"
    },
    "858": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2975,
        2980
      ],
      "op": "DUP8",
      "path": "6"
    },
    "859": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2956,
        2974
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x4C6"
    },
    "863": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        2956,
        2981
      ],
      "op": "JUMP",
      "path": "6"
    },
    "864": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2956,
        2981
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "865": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 11,
      "value": "0x38F"
    },
    "869": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "871": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "872": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "DUP1",
      "path": "6"
    },
    "873": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "875": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "ADD",
      "path": "6"
    },
    "876": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "878": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "879": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "DUP1",
      "path": "6"
    },
    "880": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xB"
    },
    "882": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "DUP2",
      "path": "6"
    },
    "883": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "884": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "886": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "ADD",
      "path": "6"
    },
    "887": {
      "op": "PUSH11",
      "value": "0x15985B1D59481A5CC80959"
    },
    "899": {
      "op": "PUSH1",
      "value": "0xAA"
    },
    "901": {
      "op": "SHL"
    },
    "902": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "DUP2",
      "path": "6"
    },
    "903": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "904": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "POP",
      "path": "6"
    },
    "905": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3018,
        3024
      ],
      "op": "DUP8",
      "path": "6"
    },
    "906": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3002
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x479"
    },
    "910": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        2991,
        3025
      ],
      "op": "JUMP",
      "path": "6"
    },
    "911": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2991,
        3025
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "912": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3117,
        3122
      ],
      "op": "DUP7",
      "path": "6",
      "statement": 12
    },
    "913": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3131,
        3137
      ],
      "op": "DUP7",
      "path": "6"
    },
    "914": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3160,
        3166
      ],
      "op": "DUP7",
      "path": "6"
    },
    "915": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3188,
        3197
      ],
      "op": "DUP7",
      "path": "6"
    },
    "916": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3219,
        3229
      ],
      "op": "DUP7",
      "path": "6"
    },
    "917": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3251,
        3267
      ],
      "op": "DUP7",
      "path": "6"
    },
    "918": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "920": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "921": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x3A3"
    },
    "925": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "926": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x50E"
    },
    "930": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        3079,
        3285
      ],
      "op": "JUMP",
      "path": "6"
    },
    "931": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "932": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x3B2"
    },
    "936": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP5",
      "path": "6"
    },
    "937": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP4",
      "path": "6"
    },
    "938": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "939": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "940": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "941": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x7F4"
    },
    "945": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "i",
      "offset": [
        3079,
        3285
      ],
      "op": "JUMP",
      "path": "6"
    },
    "946": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "947": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "DUP3",
      "path": "6"
    },
    "948": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "949": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "951": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "952": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "DUP1",
      "path": "6"
    },
    "953": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "954": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SUB",
      "path": "6"
    },
    "955": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "956": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "DUP4",
      "path": "6"
    },
    "957": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "CREATE2",
      "path": "6"
    },
    "958": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "959": {
      "op": "POP"
    },
    "960": {
      "op": "POP"
    },
    "961": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "DUP1",
      "path": "6"
    },
    "962": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "963": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "DUP1",
      "path": "6"
    },
    "964": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "965": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x3D3"
    },
    "969": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "970": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "RETURNDATASIZE",
      "path": "6"
    },
    "971": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "973": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "DUP1",
      "path": "6"
    },
    "974": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "RETURNDATACOPY",
      "path": "6"
    },
    "975": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "RETURNDATASIZE",
      "path": "6"
    },
    "976": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "978": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "REVERT",
      "path": "6"
    },
    "979": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3079,
        3285
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "980": {
      "op": "POP"
    },
    "981": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        3035,
        3299
      ],
      "op": "SWAP8",
      "path": "6"
    },
    "982": {
      "fn": "PredictBPCAddress.deploy",
      "offset": [
        2333,
        3306
      ],
      "op": "SWAP7",
      "path": "6"
    },
    "983": {
      "op": "POP"
    },
    "984": {
      "op": "POP"
    },
    "985": {
      "op": "POP"
    },
    "986": {
      "op": "POP"
    },
    "987": {
      "op": "POP"
    },
    "988": {
      "op": "POP"
    },
    "989": {
      "op": "POP"
    },
    "990": {
      "fn": "PredictBPCAddress.deploy",
      "jump": "o",
      "offset": [
        2333,
        3306
      ],
      "op": "JUMP",
      "path": "6"
    },
    "991": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "992": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1929,
        1941
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "994": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "PUSH3",
      "path": "6",
      "statement": 13,
      "value": "0x405"
    },
    "998": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "1000": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "1001": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "DUP1",
      "path": "6"
    },
    "1002": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "1004": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "ADD",
      "path": "6"
    },
    "1005": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "1007": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1008": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "DUP1",
      "path": "6"
    },
    "1009": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x2D"
    },
    "1011": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "DUP2",
      "path": "6"
    },
    "1012": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1013": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "1015": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "ADD",
      "path": "6"
    },
    "1016": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x28B9"
    },
    "1020": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x2D"
    },
    "1022": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "1023": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "CODECOPY",
      "path": "6"
    },
    "1024": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        1964
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x16C"
    },
    "1028": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "jump": "i",
      "offset": [
        1953,
        2013
      ],
      "op": "JUMP",
      "path": "6"
    },
    "1029": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1953,
        2013
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1030": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2164,
        2169
      ],
      "op": "DUP7",
      "path": "6",
      "statement": 14
    },
    "1031": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2187,
        2193
      ],
      "op": "DUP7",
      "path": "6"
    },
    "1032": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2211,
        2217
      ],
      "op": "DUP7",
      "path": "6"
    },
    "1033": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2235,
        2244
      ],
      "op": "DUP7",
      "path": "6"
    },
    "1034": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2262,
        2272
      ],
      "op": "DUP7",
      "path": "6"
    },
    "1035": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2290,
        2306
      ],
      "op": "DUP7",
      "path": "6"
    },
    "1036": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "1038": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "1039": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x24"
    },
    "1041": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "ADD",
      "path": "6"
    },
    "1042": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x422"
    },
    "1046": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP7",
      "path": "6"
    },
    "1047": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP6",
      "path": "6"
    },
    "1048": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP5",
      "path": "6"
    },
    "1049": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP4",
      "path": "6"
    },
    "1050": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP3",
      "path": "6"
    },
    "1051": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "1052": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "1053": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "PUSH3",
      "path": "6",
      "value": "0x825"
    },
    "1057": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "jump": "i",
      "offset": [
        2042,
        2320
      ],
      "op": "JUMP",
      "path": "6"
    },
    "1058": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "1059": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "1061": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "DUP1",
      "path": "6"
    },
    "1062": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "1063": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1065": {
      "op": "NOT"
    },
    "1066": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "DUP2",
      "path": "6"
    },
    "1067": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "DUP5",
      "path": "6"
    },
    "1068": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SUB",
      "path": "6"
    },
    "1069": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "ADD",
      "path": "6"
    },
    "1070": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "DUP2",
      "path": "6"
    },
    "1071": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1072": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "1073": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "1074": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1075": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "1077": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "DUP2",
      "path": "6"
    },
    "1078": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "ADD",
      "path": "6"
    },
    "1079": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "DUP1",
      "path": "6"
    },
    "1080": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "1081": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1085": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1087": {
      "op": "SHL"
    },
    "1088": {
      "op": "SUB"
    },
    "1089": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "AND",
      "path": "6"
    },
    "1090": {
      "op": "PUSH4",
      "value": "0xD0C7BBF3"
    },
    "1095": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1097": {
      "op": "SHL"
    },
    "1098": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "OR",
      "path": "6"
    },
    "1099": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "1100": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "1101": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        2042,
        2320
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "1102": {
      "op": "POP"
    },
    "1103": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "SWAP7",
      "path": "6"
    },
    "1104": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "SWAP6",
      "path": "6"
    },
    "1105": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "POP",
      "path": "6"
    },
    "1106": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "POP",
      "path": "6"
    },
    "1107": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "POP",
      "path": "6"
    },
    "1108": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "POP",
      "path": "6"
    },
    "1109": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "POP",
      "path": "6"
    },
    "1110": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "offset": [
        1680,
        2327
      ],
      "op": "POP",
      "path": "6"
    },
    "1111": {
      "fn": "PredictBPCAddress.getDeployEncodedCallData",
      "jump": "o",
      "offset": [
        1680,
        2327
      ],
      "op": "JUMP",
      "path": "6"
    },
    "1112": {
      "fn": "console._sendLogPayload",
      "offset": [
        175,
        463
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1113": {
      "fn": "console._sendLogPayload",
      "offset": [
        263,
        277
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1114": {
      "fn": "console._sendLogPayload",
      "offset": [
        263,
        277
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1115": {
      "offset": [
        128,
        170
      ],
      "op": "PUSH11",
      "path": "10",
      "value": "0x636F6E736F6C652E6C6F67"
    },
    "1127": {
      "fn": "console._sendLogPayload",
      "offset": [
        372,
        374
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1129": {
      "fn": "console._sendLogPayload",
      "offset": [
        359,
        375
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1130": {
      "fn": "console._sendLogPayload",
      "offset": [
        359,
        375
      ],
      "op": "ADD",
      "path": "10"
    },
    "1131": {
      "fn": "console._sendLogPayload",
      "offset": [
        239,
        260
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1133": {
      "fn": "console._sendLogPayload",
      "offset": [
        239,
        260
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1134": {
      "fn": "console._sendLogPayload",
      "offset": [
        263,
        277
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1135": {
      "fn": "console._sendLogPayload",
      "offset": [
        359,
        375
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1136": {
      "offset": [
        128,
        170
      ],
      "op": "DUP6",
      "path": "10"
    },
    "1137": {
      "fn": "console._sendLogPayload",
      "offset": [
        399,
        404
      ],
      "op": "GAS",
      "path": "10"
    },
    "1138": {
      "fn": "console._sendLogPayload",
      "offset": [
        388,
        456
      ],
      "op": "STATICCALL",
      "path": "10"
    },
    "1139": {
      "fn": "console._sendLogPayload",
      "offset": [
        379,
        456
      ],
      "op": "POP",
      "path": "10"
    },
    "1140": {
      "fn": "console._sendLogPayload",
      "offset": [
        379,
        456
      ],
      "op": "POP",
      "path": "10"
    },
    "1141": {
      "fn": "console._sendLogPayload",
      "offset": [
        334,
        460
      ],
      "op": "POP",
      "path": "10"
    },
    "1142": {
      "fn": "console._sendLogPayload",
      "offset": [
        334,
        460
      ],
      "op": "POP",
      "path": "10"
    },
    "1143": {
      "fn": "console._sendLogPayload",
      "offset": [
        175,
        463
      ],
      "op": "POP",
      "path": "10"
    },
    "1144": {
      "fn": "console._sendLogPayload",
      "jump": "o",
      "offset": [
        175,
        463
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1145": {
      "fn": "console.log",
      "offset": [
        5887,
        6017
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1146": {
      "fn": "console.log",
      "offset": [
        5945,
        6013
      ],
      "op": "PUSH3",
      "path": "10",
      "statement": 15,
      "value": "0x4C2"
    },
    "1150": {
      "fn": "console.log",
      "offset": [
        6005,
        6007
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1151": {
      "fn": "console.log",
      "offset": [
        6009,
        6011
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1152": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1154": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1155": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "1157": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "ADD",
      "path": "10"
    },
    "1158": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x492"
    },
    "1162": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "1163": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1164": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1165": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x866"
    },
    "1169": {
      "fn": "console.log",
      "jump": "i",
      "offset": [
        5961,
        6012
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1170": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1171": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1173": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1174": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1175": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1177": {
      "op": "NOT"
    },
    "1178": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1179": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1180": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "SUB",
      "path": "10"
    },
    "1181": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "ADD",
      "path": "10"
    },
    "1182": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1183": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1184": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1185": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1186": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1187": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1189": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1190": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "ADD",
      "path": "10"
    },
    "1191": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1192": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1193": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1195": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1197": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1199": {
      "op": "SHL"
    },
    "1200": {
      "op": "SUB"
    },
    "1201": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "AND",
      "path": "10"
    },
    "1202": {
      "op": "PUSH4",
      "value": "0x9710A9D"
    },
    "1207": {
      "op": "PUSH1",
      "value": "0xE4"
    },
    "1209": {
      "op": "SHL"
    },
    "1210": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "OR",
      "path": "10"
    },
    "1211": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1212": {
      "fn": "console.log",
      "offset": [
        5961,
        6012
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1213": {
      "fn": "console.log",
      "offset": [
        5945,
        5960
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x458"
    },
    "1217": {
      "fn": "console.log",
      "jump": "i",
      "offset": [
        5945,
        6013
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1218": {
      "fn": "console.log",
      "offset": [
        5945,
        6013
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1219": {
      "fn": "console.log",
      "offset": [
        5887,
        6017
      ],
      "op": "POP",
      "path": "10"
    },
    "1220": {
      "fn": "console.log",
      "offset": [
        5887,
        6017
      ],
      "op": "POP",
      "path": "10"
    },
    "1221": {
      "fn": "console.log",
      "jump": "o",
      "offset": [
        5887,
        6017
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1222": {
      "fn": "console.logBytes32",
      "offset": [
        4832,
        4946
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1223": {
      "fn": "console.logBytes32",
      "offset": [
        4882,
        4942
      ],
      "op": "PUSH3",
      "path": "10",
      "statement": 16,
      "value": "0x1B3"
    },
    "1227": {
      "fn": "console.logBytes32",
      "offset": [
        4938,
        4940
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1228": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1230": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1231": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x24"
    },
    "1233": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "ADD",
      "path": "10"
    },
    "1234": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x4DE"
    },
    "1238": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1239": {
      "op": "DUP2"
    },
    "1240": {
      "op": "MSTORE"
    },
    "1241": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1243": {
      "op": "ADD"
    },
    "1244": {
      "op": "SWAP1"
    },
    "1245": {
      "op": "JUMP"
    },
    "1246": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1247": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1249": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1250": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1251": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1253": {
      "op": "NOT"
    },
    "1254": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1255": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1256": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "SUB",
      "path": "10"
    },
    "1257": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "ADD",
      "path": "10"
    },
    "1258": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1259": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1260": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1261": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1262": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1263": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1265": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1266": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "ADD",
      "path": "10"
    },
    "1267": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1268": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1269": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1271": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1273": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1275": {
      "op": "SHL"
    },
    "1276": {
      "op": "SUB"
    },
    "1277": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "AND",
      "path": "10"
    },
    "1278": {
      "op": "PUSH4",
      "value": "0x27B7CF85"
    },
    "1283": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1285": {
      "op": "SHL"
    },
    "1286": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "OR",
      "path": "10"
    },
    "1287": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1288": {
      "fn": "console.logBytes32",
      "offset": [
        4898,
        4941
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1289": {
      "fn": "console.logBytes32",
      "offset": [
        4882,
        4897
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x458"
    },
    "1293": {
      "fn": "console.logBytes32",
      "jump": "i",
      "offset": [
        4882,
        4942
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1294": {
      "op": "JUMPDEST"
    },
    "1295": {
      "op": "PUSH2",
      "value": "0x1F75"
    },
    "1298": {
      "op": "DUP1"
    },
    "1299": {
      "op": "PUSH3",
      "value": "0x88B"
    },
    "1303": {
      "op": "DUP4"
    },
    "1304": {
      "op": "CODECOPY"
    },
    "1305": {
      "op": "ADD"
    },
    "1306": {
      "op": "SWAP1"
    },
    "1307": {
      "jump": "o",
      "op": "JUMP"
    },
    "1308": {
      "op": "JUMPDEST"
    },
    "1309": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1311": {
      "op": "DUP1"
    },
    "1312": {
      "op": "MLOAD"
    },
    "1313": {
      "op": "SWAP1"
    },
    "1314": {
      "op": "DUP2"
    },
    "1315": {
      "op": "ADD"
    },
    "1316": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1325": {
      "op": "DUP2"
    },
    "1326": {
      "op": "GT"
    },
    "1327": {
      "op": "DUP3"
    },
    "1328": {
      "op": "DUP3"
    },
    "1329": {
      "op": "LT"
    },
    "1330": {
      "op": "OR"
    },
    "1331": {
      "op": "ISZERO"
    },
    "1332": {
      "op": "PUSH3",
      "value": "0x54E"
    },
    "1336": {
      "op": "JUMPI"
    },
    "1337": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1342": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1344": {
      "op": "SHL"
    },
    "1345": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1347": {
      "op": "MSTORE"
    },
    "1348": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "1350": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1352": {
      "op": "MSTORE"
    },
    "1353": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1355": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1357": {
      "op": "REVERT"
    },
    "1358": {
      "op": "JUMPDEST"
    },
    "1359": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1361": {
      "op": "MSTORE"
    },
    "1362": {
      "op": "SWAP1"
    },
    "1363": {
      "jump": "o",
      "op": "JUMP"
    },
    "1364": {
      "op": "JUMPDEST"
    },
    "1365": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1367": {
      "op": "DUP3"
    },
    "1368": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1370": {
      "op": "DUP4"
    },
    "1371": {
      "op": "ADD"
    },
    "1372": {
      "op": "SLT"
    },
    "1373": {
      "op": "PUSH3",
      "value": "0x566"
    },
    "1377": {
      "op": "JUMPI"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1380": {
      "op": "DUP1"
    },
    "1381": {
      "op": "REVERT"
    },
    "1382": {
      "op": "JUMPDEST"
    },
    "1383": {
      "op": "PUSH3",
      "value": "0x570"
    },
    "1387": {
      "op": "PUSH3",
      "value": "0x51C"
    },
    "1391": {
      "jump": "i",
      "op": "JUMP"
    },
    "1392": {
      "op": "JUMPDEST"
    },
    "1393": {
      "op": "DUP1"
    },
    "1394": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1396": {
      "op": "DUP5"
    },
    "1397": {
      "op": "ADD"
    },
    "1398": {
      "op": "DUP6"
    },
    "1399": {
      "op": "DUP2"
    },
    "1400": {
      "op": "GT"
    },
    "1401": {
      "op": "ISZERO"
    },
    "1402": {
      "op": "PUSH3",
      "value": "0x583"
    },
    "1406": {
      "op": "JUMPI"
    },
    "1407": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1409": {
      "op": "DUP1"
    },
    "1410": {
      "op": "REVERT"
    },
    "1411": {
      "op": "JUMPDEST"
    },
    "1412": {
      "op": "DUP5"
    },
    "1413": {
      "op": "JUMPDEST"
    },
    "1414": {
      "op": "DUP2"
    },
    "1415": {
      "op": "DUP2"
    },
    "1416": {
      "op": "LT"
    },
    "1417": {
      "op": "ISZERO"
    },
    "1418": {
      "op": "PUSH3",
      "value": "0x59F"
    },
    "1422": {
      "op": "JUMPI"
    },
    "1423": {
      "op": "DUP1"
    },
    "1424": {
      "op": "CALLDATALOAD"
    },
    "1425": {
      "op": "DUP5"
    },
    "1426": {
      "op": "MSTORE"
    },
    "1427": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1429": {
      "op": "SWAP4"
    },
    "1430": {
      "op": "DUP5"
    },
    "1431": {
      "op": "ADD"
    },
    "1432": {
      "op": "SWAP4"
    },
    "1433": {
      "op": "ADD"
    },
    "1434": {
      "op": "PUSH3",
      "value": "0x585"
    },
    "1438": {
      "op": "JUMP"
    },
    "1439": {
      "op": "JUMPDEST"
    },
    "1440": {
      "op": "POP"
    },
    "1441": {
      "op": "SWAP1"
    },
    "1442": {
      "op": "SWAP6"
    },
    "1443": {
      "op": "SWAP5"
    },
    "1444": {
      "op": "POP"
    },
    "1445": {
      "op": "POP"
    },
    "1446": {
      "op": "POP"
    },
    "1447": {
      "op": "POP"
    },
    "1448": {
      "op": "POP"
    },
    "1449": {
      "jump": "o",
      "op": "JUMP"
    },
    "1450": {
      "op": "JUMPDEST"
    },
    "1451": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1453": {
      "op": "DUP1"
    },
    "1454": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1456": {
      "op": "DUP1"
    },
    "1457": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1459": {
      "op": "DUP1"
    },
    "1460": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "1463": {
      "op": "DUP8"
    },
    "1464": {
      "op": "DUP10"
    },
    "1465": {
      "op": "SUB"
    },
    "1466": {
      "op": "SLT"
    },
    "1467": {
      "op": "ISZERO"
    },
    "1468": {
      "op": "PUSH3",
      "value": "0x5C5"
    },
    "1472": {
      "op": "JUMPI"
    },
    "1473": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1475": {
      "op": "DUP1"
    },
    "1476": {
      "op": "REVERT"
    },
    "1477": {
      "op": "JUMPDEST"
    },
    "1478": {
      "op": "DUP7"
    },
    "1479": {
      "op": "CALLDATALOAD"
    },
    "1480": {
      "op": "SWAP6"
    },
    "1481": {
      "op": "POP"
    },
    "1482": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1484": {
      "op": "DUP1"
    },
    "1485": {
      "op": "DUP9"
    },
    "1486": {
      "op": "ADD"
    },
    "1487": {
      "op": "CALLDATALOAD"
    },
    "1488": {
      "op": "SWAP6"
    },
    "1489": {
      "op": "POP"
    },
    "1490": {
      "op": "DUP9"
    },
    "1491": {
      "op": "PUSH1",
      "value": "0x5F"
    },
    "1493": {
      "op": "DUP10"
    },
    "1494": {
      "op": "ADD"
    },
    "1495": {
      "op": "SLT"
    },
    "1496": {
      "op": "PUSH3",
      "value": "0x5E1"
    },
    "1500": {
      "op": "JUMPI"
    },
    "1501": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1503": {
      "op": "DUP1"
    },
    "1504": {
      "op": "REVERT"
    },
    "1505": {
      "op": "JUMPDEST"
    },
    "1506": {
      "op": "PUSH3",
      "value": "0x5EB"
    },
    "1510": {
      "op": "PUSH3",
      "value": "0x51C"
    },
    "1514": {
      "jump": "i",
      "op": "JUMP"
    },
    "1515": {
      "op": "JUMPDEST"
    },
    "1516": {
      "op": "DUP1"
    },
    "1517": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1519": {
      "op": "DUP11"
    },
    "1520": {
      "op": "ADD"
    },
    "1521": {
      "op": "DUP12"
    },
    "1522": {
      "op": "DUP2"
    },
    "1523": {
      "op": "GT"
    },
    "1524": {
      "op": "ISZERO"
    },
    "1525": {
      "op": "PUSH3",
      "value": "0x5FE"
    },
    "1529": {
      "op": "JUMPI"
    },
    "1530": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1532": {
      "op": "DUP1"
    },
    "1533": {
      "op": "REVERT"
    },
    "1534": {
      "op": "JUMPDEST"
    },
    "1535": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1537": {
      "op": "DUP12"
    },
    "1538": {
      "op": "ADD"
    },
    "1539": {
      "op": "JUMPDEST"
    },
    "1540": {
      "op": "DUP2"
    },
    "1541": {
      "op": "DUP2"
    },
    "1542": {
      "op": "LT"
    },
    "1543": {
      "op": "ISZERO"
    },
    "1544": {
      "op": "PUSH3",
      "value": "0x633"
    },
    "1548": {
      "op": "JUMPI"
    },
    "1549": {
      "op": "DUP1"
    },
    "1550": {
      "op": "CALLDATALOAD"
    },
    "1551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1553": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1555": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1557": {
      "op": "SHL"
    },
    "1558": {
      "op": "SUB"
    },
    "1559": {
      "op": "DUP2"
    },
    "1560": {
      "op": "AND"
    },
    "1561": {
      "op": "DUP2"
    },
    "1562": {
      "op": "EQ"
    },
    "1563": {
      "op": "PUSH3",
      "value": "0x625"
    },
    "1567": {
      "op": "JUMPI"
    },
    "1568": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1570": {
      "op": "DUP1"
    },
    "1571": {
      "op": "DUP2"
    },
    "1572": {
      "op": "REVERT"
    },
    "1573": {
      "op": "JUMPDEST"
    },
    "1574": {
      "op": "DUP5"
    },
    "1575": {
      "op": "MSTORE"
    },
    "1576": {
      "op": "SWAP3"
    },
    "1577": {
      "op": "DUP5"
    },
    "1578": {
      "op": "ADD"
    },
    "1579": {
      "op": "SWAP3"
    },
    "1580": {
      "op": "DUP5"
    },
    "1581": {
      "op": "ADD"
    },
    "1582": {
      "op": "PUSH3",
      "value": "0x603"
    },
    "1586": {
      "op": "JUMP"
    },
    "1587": {
      "op": "JUMPDEST"
    },
    "1588": {
      "op": "POP"
    },
    "1589": {
      "op": "DUP2"
    },
    "1590": {
      "op": "SWAP8"
    },
    "1591": {
      "op": "POP"
    },
    "1592": {
      "op": "PUSH3",
      "value": "0x643"
    },
    "1596": {
      "op": "DUP13"
    },
    "1597": {
      "op": "DUP3"
    },
    "1598": {
      "op": "PUSH3",
      "value": "0x554"
    },
    "1602": {
      "jump": "i",
      "op": "JUMP"
    },
    "1603": {
      "op": "JUMPDEST"
    },
    "1604": {
      "op": "SWAP7"
    },
    "1605": {
      "op": "POP"
    },
    "1606": {
      "op": "POP"
    },
    "1607": {
      "op": "POP"
    },
    "1608": {
      "op": "POP"
    },
    "1609": {
      "op": "POP"
    },
    "1610": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "1612": {
      "op": "DUP8"
    },
    "1613": {
      "op": "ADD"
    },
    "1614": {
      "op": "CALLDATALOAD"
    },
    "1615": {
      "op": "SWAP2"
    },
    "1616": {
      "op": "POP"
    },
    "1617": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1619": {
      "op": "DUP8"
    },
    "1620": {
      "op": "ADD"
    },
    "1621": {
      "op": "CALLDATALOAD"
    },
    "1622": {
      "op": "SWAP1"
    },
    "1623": {
      "op": "POP"
    },
    "1624": {
      "op": "SWAP3"
    },
    "1625": {
      "op": "SWAP6"
    },
    "1626": {
      "op": "POP"
    },
    "1627": {
      "op": "SWAP3"
    },
    "1628": {
      "op": "SWAP6"
    },
    "1629": {
      "op": "POP"
    },
    "1630": {
      "op": "SWAP3"
    },
    "1631": {
      "op": "SWAP6"
    },
    "1632": {
      "jump": "o",
      "op": "JUMP"
    },
    "1633": {
      "op": "JUMPDEST"
    },
    "1634": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1636": {
      "op": "JUMPDEST"
    },
    "1637": {
      "op": "DUP4"
    },
    "1638": {
      "op": "DUP2"
    },
    "1639": {
      "op": "LT"
    },
    "1640": {
      "op": "ISZERO"
    },
    "1641": {
      "op": "PUSH3",
      "value": "0x67E"
    },
    "1645": {
      "op": "JUMPI"
    },
    "1646": {
      "op": "DUP2"
    },
    "1647": {
      "op": "DUP2"
    },
    "1648": {
      "op": "ADD"
    },
    "1649": {
      "op": "MLOAD"
    },
    "1650": {
      "op": "DUP4"
    },
    "1651": {
      "op": "DUP3"
    },
    "1652": {
      "op": "ADD"
    },
    "1653": {
      "op": "MSTORE"
    },
    "1654": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1656": {
      "op": "ADD"
    },
    "1657": {
      "op": "PUSH3",
      "value": "0x664"
    },
    "1661": {
      "op": "JUMP"
    },
    "1662": {
      "op": "JUMPDEST"
    },
    "1663": {
      "op": "DUP4"
    },
    "1664": {
      "op": "DUP2"
    },
    "1665": {
      "op": "GT"
    },
    "1666": {
      "op": "ISZERO"
    },
    "1667": {
      "op": "PUSH3",
      "value": "0x68E"
    },
    "1671": {
      "op": "JUMPI"
    },
    "1672": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1674": {
      "op": "DUP5"
    },
    "1675": {
      "op": "DUP5"
    },
    "1676": {
      "op": "ADD"
    },
    "1677": {
      "op": "MSTORE"
    },
    "1678": {
      "op": "JUMPDEST"
    },
    "1679": {
      "op": "POP"
    },
    "1680": {
      "op": "POP"
    },
    "1681": {
      "op": "POP"
    },
    "1682": {
      "op": "POP"
    },
    "1683": {
      "jump": "o",
      "op": "JUMP"
    },
    "1684": {
      "op": "JUMPDEST"
    },
    "1685": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1687": {
      "op": "DUP2"
    },
    "1688": {
      "op": "MLOAD"
    },
    "1689": {
      "op": "DUP1"
    },
    "1690": {
      "op": "DUP5"
    },
    "1691": {
      "op": "MSTORE"
    },
    "1692": {
      "op": "PUSH3",
      "value": "0x6AE"
    },
    "1696": {
      "op": "DUP2"
    },
    "1697": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1699": {
      "op": "DUP7"
    },
    "1700": {
      "op": "ADD"
    },
    "1701": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1703": {
      "op": "DUP7"
    },
    "1704": {
      "op": "ADD"
    },
    "1705": {
      "op": "PUSH3",
      "value": "0x661"
    },
    "1709": {
      "jump": "i",
      "op": "JUMP"
    },
    "1710": {
      "op": "JUMPDEST"
    },
    "1711": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1713": {
      "op": "ADD"
    },
    "1714": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1716": {
      "op": "NOT"
    },
    "1717": {
      "op": "AND"
    },
    "1718": {
      "op": "SWAP3"
    },
    "1719": {
      "op": "SWAP1"
    },
    "1720": {
      "op": "SWAP3"
    },
    "1721": {
      "op": "ADD"
    },
    "1722": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1724": {
      "op": "ADD"
    },
    "1725": {
      "op": "SWAP3"
    },
    "1726": {
      "op": "SWAP2"
    },
    "1727": {
      "op": "POP"
    },
    "1728": {
      "op": "POP"
    },
    "1729": {
      "jump": "o",
      "op": "JUMP"
    },
    "1730": {
      "op": "JUMPDEST"
    },
    "1731": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1733": {
      "op": "DUP2"
    },
    "1734": {
      "op": "MSTORE"
    },
    "1735": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1737": {
      "op": "PUSH3",
      "value": "0x6D7"
    },
    "1741": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1743": {
      "op": "DUP4"
    },
    "1744": {
      "op": "ADD"
    },
    "1745": {
      "op": "DUP5"
    },
    "1746": {
      "op": "PUSH3",
      "value": "0x694"
    },
    "1750": {
      "jump": "i",
      "op": "JUMP"
    },
    "1751": {
      "op": "JUMPDEST"
    },
    "1752": {
      "op": "SWAP4"
    },
    "1753": {
      "op": "SWAP3"
    },
    "1754": {
      "op": "POP"
    },
    "1755": {
      "op": "POP"
    },
    "1756": {
      "op": "POP"
    },
    "1757": {
      "jump": "o",
      "op": "JUMP"
    },
    "1758": {
      "op": "JUMPDEST"
    },
    "1759": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1761": {
      "op": "DUP2"
    },
    "1762": {
      "op": "MSTORE"
    },
    "1763": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1765": {
      "op": "PUSH3",
      "value": "0x6F3"
    },
    "1769": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1771": {
      "op": "DUP4"
    },
    "1772": {
      "op": "ADD"
    },
    "1773": {
      "op": "DUP7"
    },
    "1774": {
      "op": "PUSH3",
      "value": "0x694"
    },
    "1778": {
      "jump": "i",
      "op": "JUMP"
    },
    "1779": {
      "op": "JUMPDEST"
    },
    "1780": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1782": {
      "op": "DUP4"
    },
    "1783": {
      "op": "ADD"
    },
    "1784": {
      "op": "SWAP5"
    },
    "1785": {
      "op": "SWAP1"
    },
    "1786": {
      "op": "SWAP5"
    },
    "1787": {
      "op": "MSTORE"
    },
    "1788": {
      "op": "POP"
    },
    "1789": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1791": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1795": {
      "op": "SHL"
    },
    "1796": {
      "op": "SUB"
    },
    "1797": {
      "op": "SWAP2"
    },
    "1798": {
      "op": "SWAP1"
    },
    "1799": {
      "op": "SWAP2"
    },
    "1800": {
      "op": "AND"
    },
    "1801": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1803": {
      "op": "SWAP1"
    },
    "1804": {
      "op": "SWAP2"
    },
    "1805": {
      "op": "ADD"
    },
    "1806": {
      "op": "MSTORE"
    },
    "1807": {
      "op": "SWAP2"
    },
    "1808": {
      "op": "SWAP1"
    },
    "1809": {
      "op": "POP"
    },
    "1810": {
      "jump": "o",
      "op": "JUMP"
    },
    "1811": {
      "op": "JUMPDEST"
    },
    "1812": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1814": {
      "op": "DUP7"
    },
    "1815": {
      "op": "MLOAD"
    },
    "1816": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1818": {
      "op": "PUSH3",
      "value": "0x728"
    },
    "1822": {
      "op": "DUP3"
    },
    "1823": {
      "op": "DUP6"
    },
    "1824": {
      "op": "DUP4"
    },
    "1825": {
      "op": "DUP13"
    },
    "1826": {
      "op": "ADD"
    },
    "1827": {
      "op": "PUSH3",
      "value": "0x661"
    },
    "1831": {
      "jump": "i",
      "op": "JUMP"
    },
    "1832": {
      "op": "JUMPDEST"
    },
    "1833": {
      "op": "SWAP1"
    },
    "1834": {
      "op": "DUP4"
    },
    "1835": {
      "op": "ADD"
    },
    "1836": {
      "op": "SWAP1"
    },
    "1837": {
      "op": "DUP2"
    },
    "1838": {
      "op": "DUP9"
    },
    "1839": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1841": {
      "op": "JUMPDEST"
    },
    "1842": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "1844": {
      "op": "DUP2"
    },
    "1845": {
      "op": "LT"
    },
    "1846": {
      "op": "ISZERO"
    },
    "1847": {
      "op": "PUSH3",
      "value": "0x759"
    },
    "1851": {
      "op": "JUMPI"
    },
    "1852": {
      "op": "DUP2"
    },
    "1853": {
      "op": "MLOAD"
    },
    "1854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1858": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1860": {
      "op": "SHL"
    },
    "1861": {
      "op": "SUB"
    },
    "1862": {
      "op": "AND"
    },
    "1863": {
      "op": "DUP6"
    },
    "1864": {
      "op": "MSTORE"
    },
    "1865": {
      "op": "SWAP4"
    },
    "1866": {
      "op": "DUP4"
    },
    "1867": {
      "op": "ADD"
    },
    "1868": {
      "op": "SWAP4"
    },
    "1869": {
      "op": "SWAP1"
    },
    "1870": {
      "op": "DUP4"
    },
    "1871": {
      "op": "ADD"
    },
    "1872": {
      "op": "SWAP1"
    },
    "1873": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1875": {
      "op": "ADD"
    },
    "1876": {
      "op": "PUSH3",
      "value": "0x731"
    },
    "1880": {
      "op": "JUMP"
    },
    "1881": {
      "op": "JUMPDEST"
    },
    "1882": {
      "op": "POP"
    },
    "1883": {
      "op": "POP"
    },
    "1884": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1886": {
      "op": "DUP2"
    },
    "1887": {
      "op": "ADD"
    },
    "1888": {
      "op": "SWAP3"
    },
    "1889": {
      "op": "POP"
    },
    "1890": {
      "op": "DUP8"
    },
    "1891": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1893": {
      "op": "JUMPDEST"
    },
    "1894": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "1896": {
      "op": "DUP2"
    },
    "1897": {
      "op": "LT"
    },
    "1898": {
      "op": "ISZERO"
    },
    "1899": {
      "op": "PUSH3",
      "value": "0x784"
    },
    "1903": {
      "op": "JUMPI"
    },
    "1904": {
      "op": "DUP2"
    },
    "1905": {
      "op": "MLOAD"
    },
    "1906": {
      "op": "DUP6"
    },
    "1907": {
      "op": "MSTORE"
    },
    "1908": {
      "op": "SWAP4"
    },
    "1909": {
      "op": "DUP4"
    },
    "1910": {
      "op": "ADD"
    },
    "1911": {
      "op": "SWAP4"
    },
    "1912": {
      "op": "SWAP1"
    },
    "1913": {
      "op": "DUP4"
    },
    "1914": {
      "op": "ADD"
    },
    "1915": {
      "op": "SWAP1"
    },
    "1916": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1918": {
      "op": "ADD"
    },
    "1919": {
      "op": "PUSH3",
      "value": "0x765"
    },
    "1923": {
      "op": "JUMP"
    },
    "1924": {
      "op": "JUMPDEST"
    },
    "1925": {
      "op": "POP"
    },
    "1926": {
      "op": "POP"
    },
    "1927": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1929": {
      "op": "DUP2"
    },
    "1930": {
      "op": "ADD"
    },
    "1931": {
      "op": "SWAP7"
    },
    "1932": {
      "op": "SWAP1"
    },
    "1933": {
      "op": "SWAP7"
    },
    "1934": {
      "op": "MSTORE"
    },
    "1935": {
      "op": "POP"
    },
    "1936": {
      "op": "POP"
    },
    "1937": {
      "op": "POP"
    },
    "1938": {
      "op": "POP"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1941": {
      "op": "DUP3"
    },
    "1942": {
      "op": "ADD"
    },
    "1943": {
      "op": "MSTORE"
    },
    "1944": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "1946": {
      "op": "ADD"
    },
    "1947": {
      "op": "SWAP4"
    },
    "1948": {
      "op": "SWAP3"
    },
    "1949": {
      "op": "POP"
    },
    "1950": {
      "op": "POP"
    },
    "1951": {
      "op": "POP"
    },
    "1952": {
      "jump": "o",
      "op": "JUMP"
    },
    "1953": {
      "op": "JUMPDEST"
    },
    "1954": {
      "op": "DUP1"
    },
    "1955": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1957": {
      "op": "JUMPDEST"
    },
    "1958": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "1960": {
      "op": "DUP2"
    },
    "1961": {
      "op": "LT"
    },
    "1962": {
      "op": "ISZERO"
    },
    "1963": {
      "op": "PUSH3",
      "value": "0x68E"
    },
    "1967": {
      "op": "JUMPI"
    },
    "1968": {
      "op": "DUP2"
    },
    "1969": {
      "op": "MLOAD"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1972": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1974": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1976": {
      "op": "SHL"
    },
    "1977": {
      "op": "SUB"
    },
    "1978": {
      "op": "AND"
    },
    "1979": {
      "op": "DUP5"
    },
    "1980": {
      "op": "MSTORE"
    },
    "1981": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1983": {
      "op": "SWAP4"
    },
    "1984": {
      "op": "DUP5"
    },
    "1985": {
      "op": "ADD"
    },
    "1986": {
      "op": "SWAP4"
    },
    "1987": {
      "op": "SWAP1"
    },
    "1988": {
      "op": "SWAP2"
    },
    "1989": {
      "op": "ADD"
    },
    "1990": {
      "op": "SWAP1"
    },
    "1991": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1993": {
      "op": "ADD"
    },
    "1994": {
      "op": "PUSH3",
      "value": "0x7A5"
    },
    "1998": {
      "op": "JUMP"
    },
    "1999": {
      "op": "JUMPDEST"
    },
    "2000": {
      "op": "DUP1"
    },
    "2001": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2003": {
      "op": "JUMPDEST"
    },
    "2004": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "2006": {
      "op": "DUP2"
    },
    "2007": {
      "op": "LT"
    },
    "2008": {
      "op": "ISZERO"
    },
    "2009": {
      "op": "PUSH3",
      "value": "0x68E"
    },
    "2013": {
      "op": "JUMPI"
    },
    "2014": {
      "op": "DUP2"
    },
    "2015": {
      "op": "MLOAD"
    },
    "2016": {
      "op": "DUP5"
    },
    "2017": {
      "op": "MSTORE"
    },
    "2018": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2020": {
      "op": "SWAP4"
    },
    "2021": {
      "op": "DUP5"
    },
    "2022": {
      "op": "ADD"
    },
    "2023": {
      "op": "SWAP4"
    },
    "2024": {
      "op": "SWAP1"
    },
    "2025": {
      "op": "SWAP2"
    },
    "2026": {
      "op": "ADD"
    },
    "2027": {
      "op": "SWAP1"
    },
    "2028": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2030": {
      "op": "ADD"
    },
    "2031": {
      "op": "PUSH3",
      "value": "0x7D3"
    },
    "2035": {
      "op": "JUMP"
    },
    "2036": {
      "op": "JUMPDEST"
    },
    "2037": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2039": {
      "op": "DUP2"
    },
    "2040": {
      "op": "ADD"
    },
    "2041": {
      "op": "PUSH3",
      "value": "0x804"
    },
    "2045": {
      "op": "DUP3"
    },
    "2046": {
      "op": "DUP8"
    },
    "2047": {
      "op": "PUSH3",
      "value": "0x7A1"
    },
    "2051": {
      "jump": "i",
      "op": "JUMP"
    },
    "2052": {
      "op": "JUMPDEST"
    },
    "2053": {
      "op": "PUSH3",
      "value": "0x813"
    },
    "2057": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2059": {
      "op": "DUP4"
    },
    "2060": {
      "op": "ADD"
    },
    "2061": {
      "op": "DUP7"
    },
    "2062": {
      "op": "PUSH3",
      "value": "0x7CF"
    },
    "2066": {
      "jump": "i",
      "op": "JUMP"
    },
    "2067": {
      "op": "JUMPDEST"
    },
    "2068": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2070": {
      "op": "DUP3"
    },
    "2071": {
      "op": "ADD"
    },
    "2072": {
      "op": "SWAP4"
    },
    "2073": {
      "op": "SWAP1"
    },
    "2074": {
      "op": "SWAP4"
    },
    "2075": {
      "op": "MSTORE"
    },
    "2076": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2078": {
      "op": "ADD"
    },
    "2079": {
      "op": "MSTORE"
    },
    "2080": {
      "op": "SWAP3"
    },
    "2081": {
      "op": "SWAP2"
    },
    "2082": {
      "op": "POP"
    },
    "2083": {
      "op": "POP"
    },
    "2084": {
      "jump": "o",
      "op": "JUMP"
    },
    "2085": {
      "op": "JUMPDEST"
    },
    "2086": {
      "op": "DUP7"
    },
    "2087": {
      "op": "DUP2"
    },
    "2088": {
      "op": "MSTORE"
    },
    "2089": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2091": {
      "op": "DUP2"
    },
    "2092": {
      "op": "ADD"
    },
    "2093": {
      "op": "DUP7"
    },
    "2094": {
      "op": "SWAP1"
    },
    "2095": {
      "op": "MSTORE"
    },
    "2096": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "2099": {
      "op": "DUP2"
    },
    "2100": {
      "op": "ADD"
    },
    "2101": {
      "op": "PUSH3",
      "value": "0x843"
    },
    "2105": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2107": {
      "op": "DUP4"
    },
    "2108": {
      "op": "ADD"
    },
    "2109": {
      "op": "DUP8"
    },
    "2110": {
      "op": "PUSH3",
      "value": "0x7A1"
    },
    "2114": {
      "jump": "i",
      "op": "JUMP"
    },
    "2115": {
      "op": "JUMPDEST"
    },
    "2116": {
      "op": "PUSH3",
      "value": "0x852"
    },
    "2120": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2122": {
      "op": "DUP4"
    },
    "2123": {
      "op": "ADD"
    },
    "2124": {
      "op": "DUP7"
    },
    "2125": {
      "op": "PUSH3",
      "value": "0x7CF"
    },
    "2129": {
      "jump": "i",
      "op": "JUMP"
    },
    "2130": {
      "op": "JUMPDEST"
    },
    "2131": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2133": {
      "op": "DUP3"
    },
    "2134": {
      "op": "ADD"
    },
    "2135": {
      "op": "SWAP4"
    },
    "2136": {
      "op": "SWAP1"
    },
    "2137": {
      "op": "SWAP4"
    },
    "2138": {
      "op": "MSTORE"
    },
    "2139": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2141": {
      "op": "ADD"
    },
    "2142": {
      "op": "MSTORE"
    },
    "2143": {
      "op": "SWAP5"
    },
    "2144": {
      "op": "SWAP4"
    },
    "2145": {
      "op": "POP"
    },
    "2146": {
      "op": "POP"
    },
    "2147": {
      "op": "POP"
    },
    "2148": {
      "op": "POP"
    },
    "2149": {
      "jump": "o",
      "op": "JUMP"
    },
    "2150": {
      "op": "JUMPDEST"
    },
    "2151": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2153": {
      "op": "DUP2"
    },
    "2154": {
      "op": "MSTORE"
    },
    "2155": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2157": {
      "op": "PUSH3",
      "value": "0x87B"
    },
    "2161": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2163": {
      "op": "DUP4"
    },
    "2164": {
      "op": "ADD"
    },
    "2165": {
      "op": "DUP6"
    },
    "2166": {
      "op": "PUSH3",
      "value": "0x694"
    },
    "2170": {
      "jump": "i",
      "op": "JUMP"
    },
    "2171": {
      "op": "JUMPDEST"
    },
    "2172": {
      "op": "SWAP1"
    },
    "2173": {
      "op": "POP"
    },
    "2174": {
      "op": "DUP3"
    },
    "2175": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2177": {
      "op": "DUP4"
    },
    "2178": {
      "op": "ADD"
    },
    "2179": {
      "op": "MSTORE"
    },
    "2180": {
      "op": "SWAP4"
    },
    "2181": {
      "op": "SWAP3"
    },
    "2182": {
      "op": "POP"
    },
    "2183": {
      "op": "POP"
    },
    "2184": {
      "op": "POP"
    },
    "2185": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "4f293b9db6759f5778d214b0d352081ffe013dfc",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./console.sol\";\nimport \"./BidirectionalPayment.sol\";\n\ncontract PredictBPCAddress {\n    constructor() {\n        console.log(\"PredictBPCAddress.constructor() called\");\n    }\n\n    receive() external payable {\n        console.log(\n            \"PredictBPCAddress.receive(), receiving %d from %s\",\n            msg.value,\n            msg.sender\n        );\n    }\n\n    // for a strange reason, VSCode insists to have the fallback function in its simple format\n    // and did not accept the format with input and output, as bellow\n    // the file should be saved in other code editor after commenting out the debug calls\n    //fallback(bytes calldata input) external payable returns (bytes memory output) {\n    fallback() external payable {\n        console.log(\"PredictBPCAddress.fallback() called\");\n        //console.log(\"PredictBPCAddress.fallback(), input is \");\n        //console.logBytes(input);\n        //uint256 l = input.length;\n        //if (l > 0) {\n        //    (\n        //        bytes32 c,\n        //        uint256 d,\n        //        address[2] memory u,\n        //        uint256[2] memory b,\n        //        uint256 e,\n        //        uint256 ch\n        //    ) = abi.decode(\n        //            input[4:],\n        //            (bytes32, uint256, address[2], uint256[2], uint256, uint256)\n        //        );\n        //    console.logBytes32(c);\n        //    console.log(\"d=%d\", d);\n        //    console.log(\"e=%d\", e);\n        //    console.log(\"ch=%d\", ch);\n        //    console.log(\"PredictBPCAddress.fallback(), output is \");\n        //    console.logBytes(output);\n        //}\n    }\n\n    function getDeployEncodedCallData(\n        bytes32 _salt,\n        uint256 _value,\n        address payable[2] memory _users,\n        uint256[2] memory _balances,\n        uint256 _expiresAt,\n        uint256 _challengePeriod\n    ) public view returns (bytes memory) {\n        console.log(\"PredictBPCAddress.getEncodedCallData() called\");\n        return\n            abi.encodeWithSignature(\n                \"deploy(bytes32,uint256,address[2],uint256[2],uint256,uint256)\",\n                _salt,\n                _value,\n                _users,\n                _balances,\n                _expiresAt,\n                _challengePeriod\n            );\n    }\n\n    function deploy(\n        bytes32 _salt,\n        uint256 _value,\n        address payable[2] memory _users,\n        uint256[2] memory _balances,\n        uint256 _expiresAt,\n        uint256 _challengePeriod\n    ) public payable returns (address) {\n        console.log(\"PredictBPCAddress.deploy() called\");\n        console.log(\"contract balance is %d\", address(this).balance);\n        // This syntax is a newer way to invoke create2 without assembly, you just need to pass salt\n        // https://docs.soliditylang.org/en/latest/control-structures.html#salted-contract-creations-create2\n        console.log(\"Salt is\");\n        console.logBytes32(_salt);\n        console.log(\"Value is %d\", _value);\n        return\n            address(\n                new BiDirectionalPaymentChannel{salt: _salt, value: _value}(\n                    _users,\n                    _balances,\n                    _expiresAt,\n                    _challengePeriod\n                )\n            );\n    }\n\n    function predict(\n        bytes32 _salt,\n        uint256 _value,\n        address payable[2] memory _users,\n        uint256[2] memory _balances,\n        uint256 _expiresAt,\n        uint256 _challengePeriod\n    ) public returns (address) {\n        console.log(\"PredictBPCAddress.predict() called\");\n        // This complicated expression just tells you how the address\n        // can be pre-computed. It is just there for illustration.\n        // You actually only need ``new D{salt: salt}(arg)``.\n        address predictedAddress = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            bytes1(0xff),\n                            address(this),\n                            _salt,\n                            keccak256(\n                                abi.encodePacked(\n                                    type(BiDirectionalPaymentChannel)\n                                        .creationCode,\n                                    _users,\n                                    _balances,\n                                    _expiresAt,\n                                    _challengePeriod\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        );\n\n        //D d = new D{salt: salt}(arg);\n        //require(address(d) == predictedAddress);\n        console.log(\"PredictBPCAddress.predict() passed\");\n        return predictedAddress;\n    }\n}\n",
  "sourceMap": "119:4724:6:-:0;;;152:84;;;;;;;;;;176:53;;;;;;;;;;;;;;;;;;:11;;;;;:53;;:::i;:::-;119:4724;;5053:112:10;5102:59;5157:2;5118:42;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5118:42:10;;;;;;;;;;;;;;-1:-1:-1;;;;;5118:42:10;;;-1:-1:-1;;;5118:42:10;;;;5102:15;:59;:::i;:::-;5053:112;:::o;175:288::-;263:14;;128:42;372:2;359:16;;239:21;;263:14;359:16;128:42;399:5;388:68;379:77;;334:126;;175:288;:::o;14:597:11:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:11;574:15;-1:-1:-1;;570:29:11;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:11:o;:::-;119:4724:6;;;;;;",
  "sourcePath": "contracts/PredictBPCAddress.sol",
  "type": "contract"
}